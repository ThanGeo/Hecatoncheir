digraph "APRIL::standard::IntermediateFilterEntrypoint"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="APRIL::standard::Intermediate\lFilterEntrypoint",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Standard APRIL intermediate filter that filters two input objects. The join predicate is set in the g..."];
  Node1 -> Node2 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="APRIL::uncompressed\l::standard::containsCovers\lJoinAPRIL",height=0.2,width=0.4,color="black",URL="$namespaceAPRIL_1_1uncompressed_1_1standard.html#a4af8ef5707e4036375a8ab8f614bf11d",tooltip="Joins APRIL approximations for containment (R contains/covers S)."];
  Node1 -> Node3 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="APRIL::generation::\lmemory::createAPRILforObject",height=0.2,width=0.4,color="black",URL="$namespaceAPRIL_1_1generation_1_1memory.html#a3b73e70c91d5b45c8bb7d4e25897974d",tooltip="creates the APRIL for an object"];
  Node3 -> Node4 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="AprilConfig::getCellsPerDim",height=0.2,width=0.4,color="black",URL="$structAprilConfig.html#a51d25caa3f6d819fb9babafe730772ed",tooltip="Returns the number of cells per dimension in the Hilbert grid."];
  Node3 -> Node5 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="logger::log_error",height=0.2,width=0.4,color="black",URL="$namespacelogger.html#a53f34feeb22a94db295af05b8b2aab5c",tooltip="Error logging function with template arguments. Separates input parameters with spaces...."];
  Node1 -> Node6 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="APRIL::uncompressed\l::standard::disjointJoinAPRIL",height=0.2,width=0.4,color="black",URL="$namespaceAPRIL_1_1uncompressed_1_1standard.html#aef78a2829cb19064c7b60e7531f82617",tooltip="Joins APRIL approximations for disjoint (R in S)."];
  Node1 -> Node7 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="APRIL::uncompressed\l::standard::equalJoinAPRIL",height=0.2,width=0.4,color="black",URL="$namespaceAPRIL_1_1uncompressed_1_1standard.html#a9550160ac90910c539d57177119c50e0",tooltip="Joins APRIL approximations for equality (R in S)."];
  Node1 -> Node8 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="Shape::getSpatialType",height=0.2,width=0.4,color="black",URL="$structShape.html#a7bceb50130d17c3d6d329ecf54b8da3c",tooltip="Returns the point count of the geometry."];
  Node1 -> Node9 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="APRIL::uncompressed\l::standard::insideCoveredBy\lJoinAPRIL",height=0.2,width=0.4,color="black",URL="$namespaceAPRIL_1_1uncompressed_1_1standard.html#af2eaee72911d324fca20112565a86e68",tooltip="Joins APRIL approximations for containment (R inside/covrered by S)."];
  Node1 -> Node10 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="APRIL::uncompressed\l::standard::intersectionJoin\lAPRIL",height=0.2,width=0.4,color="black",URL="$namespaceAPRIL_1_1uncompressed_1_1standard.html#ae912b0cdec7892ff809cd11bb8d3d874",tooltip="Joins APRIL approximations for intersection."];
  Node1 -> Node5 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node11 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="APRIL::uncompressed\l::standard::meetJoinAPRIL",height=0.2,width=0.4,color="black",URL="$namespaceAPRIL_1_1uncompressed_1_1standard.html#a1529bc905ed080891898784287a39940",tooltip="Joins APRIL approximations for meet (R in S)."];
  Node1 -> Node12 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="refinement::relate\l::refineContainsJoin",height=0.2,width=0.4,color="black",URL="$namespacerefinement_1_1relate.html#adf09fcf0850edaa6ba05852242e543af",tooltip="Geometrically refines two objects for 'R contains S'."];
  Node12 -> Node13 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="Shape::contains",height=0.2,width=0.4,color="black",URL="$structShape.html#a0b82933695d14e00333b3b8c19c3de1d",tooltip="Returns true whether the geometry completely contains (reverse of inside) the input geometry...."];
  Node1 -> Node14 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="refinement::relate\l::refineCoveredByJoin",height=0.2,width=0.4,color="black",URL="$namespacerefinement_1_1relate.html#ace238e193dd0c0d54eeda0c081202505",tooltip="Geometrically refines two objects for 'R is covered by S'."];
  Node14 -> Node15 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="Shape::coveredBy",height=0.2,width=0.4,color="black",URL="$structShape.html#ae917c6c1d29646e27534f4cdc65036fe",tooltip="Returns true whether the geometry is covered by (inside-border common points are allowed) the input g..."];
  Node1 -> Node16 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="refinement::relate\l::refineCoversJoin",height=0.2,width=0.4,color="black",URL="$namespacerefinement_1_1relate.html#ab68df5defc474b421b7aafed80723c32",tooltip="Geometrically refines two objects for 'R covers S'."];
  Node16 -> Node17 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="Shape::covers",height=0.2,width=0.4,color="black",URL="$structShape.html#a7c20890862aea7feb5bb0b74a2cdd015",tooltip="Returns true whether the geometry covers (reverse of covered by) the input geometry...."];
  Node1 -> Node18 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="refinement::relate\l::refineDisjointJoin",height=0.2,width=0.4,color="black",URL="$namespacerefinement_1_1relate.html#a55a81d174754ed3ec99fa3a6f97f869f",tooltip="Geometrically refines two objects for whether they are disjoint."];
  Node18 -> Node19 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="Shape::disjoint",height=0.2,width=0.4,color="black",URL="$structShape.html#afc85b84821bc9afe7042853334cded88",tooltip="Returns true whether the input geometry is disjoint (no common points) with this geometry...."];
  Node1 -> Node20 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="refinement::relate\l::refineEqualJoin",height=0.2,width=0.4,color="black",URL="$namespacerefinement_1_1relate.html#aec5965234565ec1ec3eee6121b90c112",tooltip="Geometrically refines two objects for spatial equality."];
  Node20 -> Node21 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 [label="Shape::equals",height=0.2,width=0.4,color="black",URL="$structShape.html#a2fbb9b9a688078ae99af4c289626df60",tooltip="Returns true whether the geometry is spatially equal the input geometry. False otherwise."];
  Node1 -> Node22 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="refinement::relate\l::refineInsideJoin",height=0.2,width=0.4,color="black",URL="$namespacerefinement_1_1relate.html#a22d26a184e94020bc7fe4198560f98a7",tooltip="Geometrically refines two objects for 'R inside S'."];
  Node22 -> Node23 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="Shape::inside",height=0.2,width=0.4,color="black",URL="$structShape.html#a0739ef5490685ef2c389e578fa26b361",tooltip="Returns true whether the geometry is completely inside (no inside-border common points) the input geo..."];
  Node1 -> Node24 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="refinement::relate\l::refineIntersectionJoin",height=0.2,width=0.4,color="black",URL="$namespacerefinement_1_1relate.html#a5db75d82c0cde92eff14c7bd1e9dc4c3",tooltip="Geometrically refines two objects for intersection."];
  Node24 -> Node25 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="Shape::intersects",height=0.2,width=0.4,color="black",URL="$structShape.html#a540f907bd548182b8b0ec4fcdd5e7b50",tooltip="Returns true whether the input geometry intersects (border or area) with this geometry...."];
  Node1 -> Node26 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="refinement::relate\l::refineMeetJoin",height=0.2,width=0.4,color="black",URL="$namespacerefinement_1_1relate.html#aa75c2df3796fc0a075bcec6d39e026a3",tooltip="Geometrically refines two objects for whether R and S meet (touch)."];
  Node26 -> Node27 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="Shape::meets",height=0.2,width=0.4,color="black",URL="$structShape.html#a30ef5ee8dc975e9aa9e73723cc052b26",tooltip="Returns true whether the geometry meets (touches) the input geometry (their insides do not have commo..."];
}
