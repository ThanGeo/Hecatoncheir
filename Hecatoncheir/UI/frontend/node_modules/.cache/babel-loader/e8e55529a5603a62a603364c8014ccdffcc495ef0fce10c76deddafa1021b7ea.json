{"ast":null,"code":"\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport EditOutlined from \"@ant-design/icons/es/icons/EditOutlined\";\nimport classNames from 'classnames';\nimport ResizeObserver from 'rc-resize-observer';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport omit from \"rc-util/es/omit\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport { isStyleSupport } from '../../_util/styleChecker';\nimport { ConfigContext } from '../../config-provider';\nimport useLocale from '../../locale/useLocale';\nimport Tooltip from '../../tooltip';\nimport Editable from '../Editable';\nimport useCopyClick from '../hooks/useCopyClick';\nimport useMergedConfig from '../hooks/useMergedConfig';\nimport usePrevious from '../hooks/usePrevious';\nimport useTooltipProps from '../hooks/useTooltipProps';\nimport Typography from '../Typography';\nimport CopyBtn from './CopyBtn';\nimport Ellipsis from './Ellipsis';\nimport EllipsisTooltip from './EllipsisTooltip';\nimport { isEleEllipsis, isValidText } from './util';\nfunction wrapperDecorations({\n  mark,\n  code,\n  underline,\n  delete: del,\n  strong,\n  keyboard,\n  italic\n}, content) {\n  let currentContent = content;\n  function wrap(tag, needed) {\n    if (!needed) {\n      return;\n    }\n    currentContent = /*#__PURE__*/React.createElement(tag, {}, currentContent);\n  }\n  wrap('strong', strong);\n  wrap('u', underline);\n  wrap('del', del);\n  wrap('code', code);\n  wrap('mark', mark);\n  wrap('kbd', keyboard);\n  wrap('i', italic);\n  return currentContent;\n}\nconst ELLIPSIS_STR = '...';\nconst DECORATION_PROPS = ['delete', 'mark', 'code', 'underline', 'strong', 'keyboard', 'italic'];\nconst Base = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var _a;\n  const {\n      prefixCls: customizePrefixCls,\n      className,\n      style,\n      type,\n      disabled,\n      children,\n      ellipsis,\n      editable,\n      copyable,\n      component,\n      title\n    } = props,\n    restProps = __rest(props, [\"prefixCls\", \"className\", \"style\", \"type\", \"disabled\", \"children\", \"ellipsis\", \"editable\", \"copyable\", \"component\", \"title\"]);\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const [textLocale] = useLocale('Text');\n  const typographyRef = React.useRef(null);\n  const editIconRef = React.useRef(null);\n  // ============================ MISC ============================\n  const prefixCls = getPrefixCls('typography', customizePrefixCls);\n  const textProps = omit(restProps, DECORATION_PROPS);\n  // ========================== Editable ==========================\n  const [enableEdit, editConfig] = useMergedConfig(editable);\n  const [editing, setEditing] = useMergedState(false, {\n    value: editConfig.editing\n  });\n  const {\n    triggerType = ['icon']\n  } = editConfig;\n  const triggerEdit = edit => {\n    var _a;\n    if (edit) {\n      (_a = editConfig.onStart) === null || _a === void 0 ? void 0 : _a.call(editConfig);\n    }\n    setEditing(edit);\n  };\n  // Focus edit icon when back\n  const prevEditing = usePrevious(editing);\n  useLayoutEffect(() => {\n    var _a;\n    if (!editing && prevEditing) {\n      (_a = editIconRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [editing]);\n  const onEditClick = e => {\n    e === null || e === void 0 ? void 0 : e.preventDefault();\n    triggerEdit(true);\n  };\n  const onEditChange = value => {\n    var _a;\n    (_a = editConfig.onChange) === null || _a === void 0 ? void 0 : _a.call(editConfig, value);\n    triggerEdit(false);\n  };\n  const onEditCancel = () => {\n    var _a;\n    (_a = editConfig.onCancel) === null || _a === void 0 ? void 0 : _a.call(editConfig);\n    triggerEdit(false);\n  };\n  // ========================== Copyable ==========================\n  const [enableCopy, copyConfig] = useMergedConfig(copyable);\n  const {\n    copied,\n    copyLoading,\n    onClick: onCopyClick\n  } = useCopyClick({\n    copyConfig,\n    children\n  });\n  // ========================== Ellipsis ==========================\n  const [isLineClampSupport, setIsLineClampSupport] = React.useState(false);\n  const [isTextOverflowSupport, setIsTextOverflowSupport] = React.useState(false);\n  const [isJsEllipsis, setIsJsEllipsis] = React.useState(false);\n  const [isNativeEllipsis, setIsNativeEllipsis] = React.useState(false);\n  const [isNativeVisible, setIsNativeVisible] = React.useState(true);\n  const [enableEllipsis, ellipsisConfig] = useMergedConfig(ellipsis, {\n    expandable: false,\n    symbol: isExpanded => isExpanded ? textLocale === null || textLocale === void 0 ? void 0 : textLocale.collapse : textLocale === null || textLocale === void 0 ? void 0 : textLocale.expand\n  });\n  const [expanded, setExpanded] = useMergedState(ellipsisConfig.defaultExpanded || false, {\n    value: ellipsisConfig.expanded\n  });\n  const mergedEnableEllipsis = enableEllipsis && (!expanded || ellipsisConfig.expandable === 'collapsible');\n  // Shared prop to reduce bundle size\n  const {\n    rows = 1\n  } = ellipsisConfig;\n  const needMeasureEllipsis = React.useMemo(() =>\n  // Disable ellipsis\n  mergedEnableEllipsis && (\n  // Provide suffix\n  ellipsisConfig.suffix !== undefined || ellipsisConfig.onEllipsis ||\n  // Can't use css ellipsis since we need to provide the place for button\n  ellipsisConfig.expandable || enableEdit || enableCopy), [mergedEnableEllipsis, ellipsisConfig, enableEdit, enableCopy]);\n  useLayoutEffect(() => {\n    if (enableEllipsis && !needMeasureEllipsis) {\n      setIsLineClampSupport(isStyleSupport('webkitLineClamp'));\n      setIsTextOverflowSupport(isStyleSupport('textOverflow'));\n    }\n  }, [needMeasureEllipsis, enableEllipsis]);\n  const [cssEllipsis, setCssEllipsis] = React.useState(mergedEnableEllipsis);\n  const canUseCssEllipsis = React.useMemo(() => {\n    if (needMeasureEllipsis) {\n      return false;\n    }\n    if (rows === 1) {\n      return isTextOverflowSupport;\n    }\n    return isLineClampSupport;\n  }, [needMeasureEllipsis, isTextOverflowSupport, isLineClampSupport]);\n  // We use effect to change from css ellipsis to js ellipsis.\n  // To make SSR still can see the ellipsis.\n  useLayoutEffect(() => {\n    setCssEllipsis(canUseCssEllipsis && mergedEnableEllipsis);\n  }, [canUseCssEllipsis, mergedEnableEllipsis]);\n  const isMergedEllipsis = mergedEnableEllipsis && (cssEllipsis ? isNativeEllipsis : isJsEllipsis);\n  const cssTextOverflow = mergedEnableEllipsis && rows === 1 && cssEllipsis;\n  const cssLineClamp = mergedEnableEllipsis && rows > 1 && cssEllipsis;\n  // >>>>> Expand\n  const onExpandClick = (e, info) => {\n    var _a;\n    setExpanded(info.expanded);\n    (_a = ellipsisConfig.onExpand) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, e, info);\n  };\n  const [ellipsisWidth, setEllipsisWidth] = React.useState(0);\n  const onResize = ({\n    offsetWidth\n  }) => {\n    setEllipsisWidth(offsetWidth);\n  };\n  // >>>>> JS Ellipsis\n  const onJsEllipsis = jsEllipsis => {\n    var _a;\n    setIsJsEllipsis(jsEllipsis);\n    // Trigger if changed\n    if (isJsEllipsis !== jsEllipsis) {\n      (_a = ellipsisConfig.onEllipsis) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, jsEllipsis);\n    }\n  };\n  // >>>>> Native ellipsis\n  React.useEffect(() => {\n    const textEle = typographyRef.current;\n    if (enableEllipsis && cssEllipsis && textEle) {\n      const currentEllipsis = isEleEllipsis(textEle);\n      if (isNativeEllipsis !== currentEllipsis) {\n        setIsNativeEllipsis(currentEllipsis);\n      }\n    }\n  }, [enableEllipsis, cssEllipsis, children, cssLineClamp, isNativeVisible, ellipsisWidth]);\n  // https://github.com/ant-design/ant-design/issues/36786\n  // Use IntersectionObserver to check if element is invisible\n  React.useEffect(() => {\n    const textEle = typographyRef.current;\n    if (typeof IntersectionObserver === 'undefined' || !textEle || !cssEllipsis || !mergedEnableEllipsis) {\n      return;\n    }\n    /* eslint-disable-next-line compat/compat */\n    const observer = new IntersectionObserver(() => {\n      setIsNativeVisible(!!textEle.offsetParent);\n    });\n    observer.observe(textEle);\n    return () => {\n      observer.disconnect();\n    };\n  }, [cssEllipsis, mergedEnableEllipsis]);\n  // ========================== Tooltip ===========================\n  const tooltipProps = useTooltipProps(ellipsisConfig.tooltip, editConfig.text, children);\n  const topAriaLabel = React.useMemo(() => {\n    if (!enableEllipsis || cssEllipsis) {\n      return undefined;\n    }\n    return [editConfig.text, children, title, tooltipProps.title].find(isValidText);\n  }, [enableEllipsis, cssEllipsis, title, tooltipProps.title, isMergedEllipsis]);\n  // =========================== Render ===========================\n  // >>>>>>>>>>> Editing input\n  if (editing) {\n    return /*#__PURE__*/React.createElement(Editable, {\n      value: (_a = editConfig.text) !== null && _a !== void 0 ? _a : typeof children === 'string' ? children : '',\n      onSave: onEditChange,\n      onCancel: onEditCancel,\n      onEnd: editConfig.onEnd,\n      prefixCls: prefixCls,\n      className: className,\n      style: style,\n      direction: direction,\n      component: component,\n      maxLength: editConfig.maxLength,\n      autoSize: editConfig.autoSize,\n      enterIcon: editConfig.enterIcon\n    });\n  }\n  // >>>>>>>>>>> Typography\n  // Expand\n  const renderExpand = () => {\n    const {\n      expandable,\n      symbol\n    } = ellipsisConfig;\n    return expandable ? (/*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      key: \"expand\",\n      className: `${prefixCls}-${expanded ? 'collapse' : 'expand'}`,\n      onClick: e => onExpandClick(e, {\n        expanded: !expanded\n      }),\n      \"aria-label\": expanded ? textLocale.collapse : textLocale === null || textLocale === void 0 ? void 0 : textLocale.expand\n    }, typeof symbol === 'function' ? symbol(expanded) : symbol)) : null;\n  };\n  // Edit\n  const renderEdit = () => {\n    if (!enableEdit) {\n      return;\n    }\n    const {\n      icon,\n      tooltip,\n      tabIndex\n    } = editConfig;\n    const editTitle = toArray(tooltip)[0] || (textLocale === null || textLocale === void 0 ? void 0 : textLocale.edit);\n    const ariaLabel = typeof editTitle === 'string' ? editTitle : '';\n    return triggerType.includes('icon') ? (/*#__PURE__*/React.createElement(Tooltip, {\n      key: \"edit\",\n      title: tooltip === false ? '' : editTitle\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      ref: editIconRef,\n      className: `${prefixCls}-edit`,\n      onClick: onEditClick,\n      \"aria-label\": ariaLabel,\n      tabIndex: tabIndex\n    }, icon || /*#__PURE__*/React.createElement(EditOutlined, {\n      role: \"button\"\n    })))) : null;\n  };\n  // Copy\n  const renderCopy = () => {\n    if (!enableCopy) {\n      return null;\n    }\n    return /*#__PURE__*/React.createElement(CopyBtn, Object.assign({\n      key: \"copy\"\n    }, copyConfig, {\n      prefixCls: prefixCls,\n      copied: copied,\n      locale: textLocale,\n      onCopy: onCopyClick,\n      loading: copyLoading,\n      iconOnly: children === null || children === undefined\n    }));\n  };\n  const renderOperations = canEllipsis => [canEllipsis && renderExpand(), renderEdit(), renderCopy()];\n  const renderEllipsis = canEllipsis => [canEllipsis && !expanded && (/*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    key: \"ellipsis\"\n  }, ELLIPSIS_STR)), ellipsisConfig.suffix, renderOperations(canEllipsis)];\n  return /*#__PURE__*/React.createElement(ResizeObserver, {\n    onResize: onResize,\n    disabled: !mergedEnableEllipsis\n  }, resizeRef => (/*#__PURE__*/React.createElement(EllipsisTooltip, {\n    tooltipProps: tooltipProps,\n    enableEllipsis: mergedEnableEllipsis,\n    isEllipsis: isMergedEllipsis\n  }, /*#__PURE__*/React.createElement(Typography, Object.assign({\n    className: classNames({\n      [`${prefixCls}-${type}`]: type,\n      [`${prefixCls}-disabled`]: disabled,\n      [`${prefixCls}-ellipsis`]: enableEllipsis,\n      [`${prefixCls}-ellipsis-single-line`]: cssTextOverflow,\n      [`${prefixCls}-ellipsis-multiple-line`]: cssLineClamp\n    }, className),\n    prefixCls: customizePrefixCls,\n    style: Object.assign(Object.assign({}, style), {\n      WebkitLineClamp: cssLineClamp ? rows : undefined\n    }),\n    component: component,\n    ref: composeRef(resizeRef, typographyRef, ref),\n    direction: direction,\n    onClick: triggerType.includes('text') ? onEditClick : undefined,\n    \"aria-label\": topAriaLabel === null || topAriaLabel === void 0 ? void 0 : topAriaLabel.toString(),\n    title: title\n  }, textProps), /*#__PURE__*/React.createElement(Ellipsis, {\n    enableMeasure: mergedEnableEllipsis && !cssEllipsis,\n    text: children,\n    rows: rows,\n    width: ellipsisWidth,\n    onEllipsis: onJsEllipsis,\n    expanded: expanded,\n    miscDeps: [copied, expanded, copyLoading, enableEdit, enableCopy, textLocale].concat(_toConsumableArray(DECORATION_PROPS.map(key => props[key])))\n  }, (node, canEllipsis) => wrapperDecorations(props, /*#__PURE__*/React.createElement(React.Fragment, null, node.length > 0 && canEllipsis && !expanded && topAriaLabel ? (/*#__PURE__*/React.createElement(\"span\", {\n    key: \"show-content\",\n    \"aria-hidden\": true\n  }, node)) : node, renderEllipsis(canEllipsis))))))));\n});\nexport default Base;","map":{"version":3,"names":["_toConsumableArray","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","EditOutlined","classNames","ResizeObserver","toArray","useLayoutEffect","useMergedState","omit","composeRef","isStyleSupport","ConfigContext","useLocale","Tooltip","Editable","useCopyClick","useMergedConfig","usePrevious","useTooltipProps","Typography","CopyBtn","Ellipsis","EllipsisTooltip","isEleEllipsis","isValidText","wrapperDecorations","mark","code","underline","delete","del","strong","keyboard","italic","content","currentContent","wrap","tag","needed","createElement","ELLIPSIS_STR","DECORATION_PROPS","Base","forwardRef","props","ref","_a","prefixCls","customizePrefixCls","className","style","type","disabled","children","ellipsis","editable","copyable","component","title","restProps","getPrefixCls","direction","useContext","textLocale","typographyRef","useRef","editIconRef","textProps","enableEdit","editConfig","editing","setEditing","value","triggerType","triggerEdit","edit","onStart","prevEditing","current","focus","onEditClick","preventDefault","onEditChange","onChange","onEditCancel","onCancel","enableCopy","copyConfig","copied","copyLoading","onClick","onCopyClick","isLineClampSupport","setIsLineClampSupport","useState","isTextOverflowSupport","setIsTextOverflowSupport","isJsEllipsis","setIsJsEllipsis","isNativeEllipsis","setIsNativeEllipsis","isNativeVisible","setIsNativeVisible","enableEllipsis","ellipsisConfig","expandable","symbol","isExpanded","collapse","expand","expanded","setExpanded","defaultExpanded","mergedEnableEllipsis","rows","needMeasureEllipsis","useMemo","suffix","undefined","onEllipsis","cssEllipsis","setCssEllipsis","canUseCssEllipsis","isMergedEllipsis","cssTextOverflow","cssLineClamp","onExpandClick","info","onExpand","ellipsisWidth","setEllipsisWidth","onResize","offsetWidth","onJsEllipsis","jsEllipsis","useEffect","textEle","currentEllipsis","IntersectionObserver","observer","offsetParent","observe","disconnect","tooltipProps","tooltip","text","topAriaLabel","find","onSave","onEnd","maxLength","autoSize","enterIcon","renderExpand","key","renderEdit","icon","tabIndex","editTitle","ariaLabel","includes","role","renderCopy","assign","locale","onCopy","loading","iconOnly","renderOperations","canEllipsis","renderEllipsis","resizeRef","isEllipsis","WebkitLineClamp","toString","enableMeasure","width","miscDeps","concat","map","node","Fragment"],"sources":["/home/command/Desktop/hecatoncheir-app/frontend/node_modules/antd/es/typography/Base/index.js"],"sourcesContent":["\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport EditOutlined from \"@ant-design/icons/es/icons/EditOutlined\";\nimport classNames from 'classnames';\nimport ResizeObserver from 'rc-resize-observer';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport omit from \"rc-util/es/omit\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport { isStyleSupport } from '../../_util/styleChecker';\nimport { ConfigContext } from '../../config-provider';\nimport useLocale from '../../locale/useLocale';\nimport Tooltip from '../../tooltip';\nimport Editable from '../Editable';\nimport useCopyClick from '../hooks/useCopyClick';\nimport useMergedConfig from '../hooks/useMergedConfig';\nimport usePrevious from '../hooks/usePrevious';\nimport useTooltipProps from '../hooks/useTooltipProps';\nimport Typography from '../Typography';\nimport CopyBtn from './CopyBtn';\nimport Ellipsis from './Ellipsis';\nimport EllipsisTooltip from './EllipsisTooltip';\nimport { isEleEllipsis, isValidText } from './util';\nfunction wrapperDecorations({\n  mark,\n  code,\n  underline,\n  delete: del,\n  strong,\n  keyboard,\n  italic\n}, content) {\n  let currentContent = content;\n  function wrap(tag, needed) {\n    if (!needed) {\n      return;\n    }\n    currentContent = /*#__PURE__*/React.createElement(tag, {}, currentContent);\n  }\n  wrap('strong', strong);\n  wrap('u', underline);\n  wrap('del', del);\n  wrap('code', code);\n  wrap('mark', mark);\n  wrap('kbd', keyboard);\n  wrap('i', italic);\n  return currentContent;\n}\nconst ELLIPSIS_STR = '...';\nconst DECORATION_PROPS = ['delete', 'mark', 'code', 'underline', 'strong', 'keyboard', 'italic'];\nconst Base = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var _a;\n  const {\n      prefixCls: customizePrefixCls,\n      className,\n      style,\n      type,\n      disabled,\n      children,\n      ellipsis,\n      editable,\n      copyable,\n      component,\n      title\n    } = props,\n    restProps = __rest(props, [\"prefixCls\", \"className\", \"style\", \"type\", \"disabled\", \"children\", \"ellipsis\", \"editable\", \"copyable\", \"component\", \"title\"]);\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const [textLocale] = useLocale('Text');\n  const typographyRef = React.useRef(null);\n  const editIconRef = React.useRef(null);\n  // ============================ MISC ============================\n  const prefixCls = getPrefixCls('typography', customizePrefixCls);\n  const textProps = omit(restProps, DECORATION_PROPS);\n  // ========================== Editable ==========================\n  const [enableEdit, editConfig] = useMergedConfig(editable);\n  const [editing, setEditing] = useMergedState(false, {\n    value: editConfig.editing\n  });\n  const {\n    triggerType = ['icon']\n  } = editConfig;\n  const triggerEdit = edit => {\n    var _a;\n    if (edit) {\n      (_a = editConfig.onStart) === null || _a === void 0 ? void 0 : _a.call(editConfig);\n    }\n    setEditing(edit);\n  };\n  // Focus edit icon when back\n  const prevEditing = usePrevious(editing);\n  useLayoutEffect(() => {\n    var _a;\n    if (!editing && prevEditing) {\n      (_a = editIconRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [editing]);\n  const onEditClick = e => {\n    e === null || e === void 0 ? void 0 : e.preventDefault();\n    triggerEdit(true);\n  };\n  const onEditChange = value => {\n    var _a;\n    (_a = editConfig.onChange) === null || _a === void 0 ? void 0 : _a.call(editConfig, value);\n    triggerEdit(false);\n  };\n  const onEditCancel = () => {\n    var _a;\n    (_a = editConfig.onCancel) === null || _a === void 0 ? void 0 : _a.call(editConfig);\n    triggerEdit(false);\n  };\n  // ========================== Copyable ==========================\n  const [enableCopy, copyConfig] = useMergedConfig(copyable);\n  const {\n    copied,\n    copyLoading,\n    onClick: onCopyClick\n  } = useCopyClick({\n    copyConfig,\n    children\n  });\n  // ========================== Ellipsis ==========================\n  const [isLineClampSupport, setIsLineClampSupport] = React.useState(false);\n  const [isTextOverflowSupport, setIsTextOverflowSupport] = React.useState(false);\n  const [isJsEllipsis, setIsJsEllipsis] = React.useState(false);\n  const [isNativeEllipsis, setIsNativeEllipsis] = React.useState(false);\n  const [isNativeVisible, setIsNativeVisible] = React.useState(true);\n  const [enableEllipsis, ellipsisConfig] = useMergedConfig(ellipsis, {\n    expandable: false,\n    symbol: isExpanded => isExpanded ? textLocale === null || textLocale === void 0 ? void 0 : textLocale.collapse : textLocale === null || textLocale === void 0 ? void 0 : textLocale.expand\n  });\n  const [expanded, setExpanded] = useMergedState(ellipsisConfig.defaultExpanded || false, {\n    value: ellipsisConfig.expanded\n  });\n  const mergedEnableEllipsis = enableEllipsis && (!expanded || ellipsisConfig.expandable === 'collapsible');\n  // Shared prop to reduce bundle size\n  const {\n    rows = 1\n  } = ellipsisConfig;\n  const needMeasureEllipsis = React.useMemo(() =>\n  // Disable ellipsis\n  mergedEnableEllipsis && (\n  // Provide suffix\n  ellipsisConfig.suffix !== undefined || ellipsisConfig.onEllipsis ||\n  // Can't use css ellipsis since we need to provide the place for button\n  ellipsisConfig.expandable || enableEdit || enableCopy), [mergedEnableEllipsis, ellipsisConfig, enableEdit, enableCopy]);\n  useLayoutEffect(() => {\n    if (enableEllipsis && !needMeasureEllipsis) {\n      setIsLineClampSupport(isStyleSupport('webkitLineClamp'));\n      setIsTextOverflowSupport(isStyleSupport('textOverflow'));\n    }\n  }, [needMeasureEllipsis, enableEllipsis]);\n  const [cssEllipsis, setCssEllipsis] = React.useState(mergedEnableEllipsis);\n  const canUseCssEllipsis = React.useMemo(() => {\n    if (needMeasureEllipsis) {\n      return false;\n    }\n    if (rows === 1) {\n      return isTextOverflowSupport;\n    }\n    return isLineClampSupport;\n  }, [needMeasureEllipsis, isTextOverflowSupport, isLineClampSupport]);\n  // We use effect to change from css ellipsis to js ellipsis.\n  // To make SSR still can see the ellipsis.\n  useLayoutEffect(() => {\n    setCssEllipsis(canUseCssEllipsis && mergedEnableEllipsis);\n  }, [canUseCssEllipsis, mergedEnableEllipsis]);\n  const isMergedEllipsis = mergedEnableEllipsis && (cssEllipsis ? isNativeEllipsis : isJsEllipsis);\n  const cssTextOverflow = mergedEnableEllipsis && rows === 1 && cssEllipsis;\n  const cssLineClamp = mergedEnableEllipsis && rows > 1 && cssEllipsis;\n  // >>>>> Expand\n  const onExpandClick = (e, info) => {\n    var _a;\n    setExpanded(info.expanded);\n    (_a = ellipsisConfig.onExpand) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, e, info);\n  };\n  const [ellipsisWidth, setEllipsisWidth] = React.useState(0);\n  const onResize = ({\n    offsetWidth\n  }) => {\n    setEllipsisWidth(offsetWidth);\n  };\n  // >>>>> JS Ellipsis\n  const onJsEllipsis = jsEllipsis => {\n    var _a;\n    setIsJsEllipsis(jsEllipsis);\n    // Trigger if changed\n    if (isJsEllipsis !== jsEllipsis) {\n      (_a = ellipsisConfig.onEllipsis) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, jsEllipsis);\n    }\n  };\n  // >>>>> Native ellipsis\n  React.useEffect(() => {\n    const textEle = typographyRef.current;\n    if (enableEllipsis && cssEllipsis && textEle) {\n      const currentEllipsis = isEleEllipsis(textEle);\n      if (isNativeEllipsis !== currentEllipsis) {\n        setIsNativeEllipsis(currentEllipsis);\n      }\n    }\n  }, [enableEllipsis, cssEllipsis, children, cssLineClamp, isNativeVisible, ellipsisWidth]);\n  // https://github.com/ant-design/ant-design/issues/36786\n  // Use IntersectionObserver to check if element is invisible\n  React.useEffect(() => {\n    const textEle = typographyRef.current;\n    if (typeof IntersectionObserver === 'undefined' || !textEle || !cssEllipsis || !mergedEnableEllipsis) {\n      return;\n    }\n    /* eslint-disable-next-line compat/compat */\n    const observer = new IntersectionObserver(() => {\n      setIsNativeVisible(!!textEle.offsetParent);\n    });\n    observer.observe(textEle);\n    return () => {\n      observer.disconnect();\n    };\n  }, [cssEllipsis, mergedEnableEllipsis]);\n  // ========================== Tooltip ===========================\n  const tooltipProps = useTooltipProps(ellipsisConfig.tooltip, editConfig.text, children);\n  const topAriaLabel = React.useMemo(() => {\n    if (!enableEllipsis || cssEllipsis) {\n      return undefined;\n    }\n    return [editConfig.text, children, title, tooltipProps.title].find(isValidText);\n  }, [enableEllipsis, cssEllipsis, title, tooltipProps.title, isMergedEllipsis]);\n  // =========================== Render ===========================\n  // >>>>>>>>>>> Editing input\n  if (editing) {\n    return /*#__PURE__*/React.createElement(Editable, {\n      value: (_a = editConfig.text) !== null && _a !== void 0 ? _a : typeof children === 'string' ? children : '',\n      onSave: onEditChange,\n      onCancel: onEditCancel,\n      onEnd: editConfig.onEnd,\n      prefixCls: prefixCls,\n      className: className,\n      style: style,\n      direction: direction,\n      component: component,\n      maxLength: editConfig.maxLength,\n      autoSize: editConfig.autoSize,\n      enterIcon: editConfig.enterIcon\n    });\n  }\n  // >>>>>>>>>>> Typography\n  // Expand\n  const renderExpand = () => {\n    const {\n      expandable,\n      symbol\n    } = ellipsisConfig;\n    return expandable ? (/*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      key: \"expand\",\n      className: `${prefixCls}-${expanded ? 'collapse' : 'expand'}`,\n      onClick: e => onExpandClick(e, {\n        expanded: !expanded\n      }),\n      \"aria-label\": expanded ? textLocale.collapse : textLocale === null || textLocale === void 0 ? void 0 : textLocale.expand\n    }, typeof symbol === 'function' ? symbol(expanded) : symbol)) : null;\n  };\n  // Edit\n  const renderEdit = () => {\n    if (!enableEdit) {\n      return;\n    }\n    const {\n      icon,\n      tooltip,\n      tabIndex\n    } = editConfig;\n    const editTitle = toArray(tooltip)[0] || (textLocale === null || textLocale === void 0 ? void 0 : textLocale.edit);\n    const ariaLabel = typeof editTitle === 'string' ? editTitle : '';\n    return triggerType.includes('icon') ? (/*#__PURE__*/React.createElement(Tooltip, {\n      key: \"edit\",\n      title: tooltip === false ? '' : editTitle\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      ref: editIconRef,\n      className: `${prefixCls}-edit`,\n      onClick: onEditClick,\n      \"aria-label\": ariaLabel,\n      tabIndex: tabIndex\n    }, icon || /*#__PURE__*/React.createElement(EditOutlined, {\n      role: \"button\"\n    })))) : null;\n  };\n  // Copy\n  const renderCopy = () => {\n    if (!enableCopy) {\n      return null;\n    }\n    return /*#__PURE__*/React.createElement(CopyBtn, Object.assign({\n      key: \"copy\"\n    }, copyConfig, {\n      prefixCls: prefixCls,\n      copied: copied,\n      locale: textLocale,\n      onCopy: onCopyClick,\n      loading: copyLoading,\n      iconOnly: children === null || children === undefined\n    }));\n  };\n  const renderOperations = canEllipsis => [canEllipsis && renderExpand(), renderEdit(), renderCopy()];\n  const renderEllipsis = canEllipsis => [canEllipsis && !expanded && (/*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    key: \"ellipsis\"\n  }, ELLIPSIS_STR)), ellipsisConfig.suffix, renderOperations(canEllipsis)];\n  return /*#__PURE__*/React.createElement(ResizeObserver, {\n    onResize: onResize,\n    disabled: !mergedEnableEllipsis\n  }, resizeRef => (/*#__PURE__*/React.createElement(EllipsisTooltip, {\n    tooltipProps: tooltipProps,\n    enableEllipsis: mergedEnableEllipsis,\n    isEllipsis: isMergedEllipsis\n  }, /*#__PURE__*/React.createElement(Typography, Object.assign({\n    className: classNames({\n      [`${prefixCls}-${type}`]: type,\n      [`${prefixCls}-disabled`]: disabled,\n      [`${prefixCls}-ellipsis`]: enableEllipsis,\n      [`${prefixCls}-ellipsis-single-line`]: cssTextOverflow,\n      [`${prefixCls}-ellipsis-multiple-line`]: cssLineClamp\n    }, className),\n    prefixCls: customizePrefixCls,\n    style: Object.assign(Object.assign({}, style), {\n      WebkitLineClamp: cssLineClamp ? rows : undefined\n    }),\n    component: component,\n    ref: composeRef(resizeRef, typographyRef, ref),\n    direction: direction,\n    onClick: triggerType.includes('text') ? onEditClick : undefined,\n    \"aria-label\": topAriaLabel === null || topAriaLabel === void 0 ? void 0 : topAriaLabel.toString(),\n    title: title\n  }, textProps), /*#__PURE__*/React.createElement(Ellipsis, {\n    enableMeasure: mergedEnableEllipsis && !cssEllipsis,\n    text: children,\n    rows: rows,\n    width: ellipsisWidth,\n    onEllipsis: onJsEllipsis,\n    expanded: expanded,\n    miscDeps: [copied, expanded, copyLoading, enableEdit, enableCopy, textLocale].concat(_toConsumableArray(DECORATION_PROPS.map(key => props[key])))\n  }, (node, canEllipsis) => wrapperDecorations(props, /*#__PURE__*/React.createElement(React.Fragment, null, node.length > 0 && canEllipsis && !expanded && topAriaLabel ? (/*#__PURE__*/React.createElement(\"span\", {\n    key: \"show-content\",\n    \"aria-hidden\": true\n  }, node)) : node, renderEllipsis(canEllipsis))))))));\n});\nexport default Base;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}