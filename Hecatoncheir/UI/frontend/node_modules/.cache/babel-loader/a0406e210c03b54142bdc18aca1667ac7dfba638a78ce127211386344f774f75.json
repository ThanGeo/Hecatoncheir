{"ast":null,"code":"var _jsxFileName = \"/home/command/Desktop/hecatoncheir-app/frontend/src/components/set-up-hecatoncheir.tsx\",\n  _s = $RefreshSig$();\n// src/components/ClusterSetup.tsx\nimport React, { useState, useEffect } from 'react';\nimport { Form, Button, message, Row, Col } from 'antd'; // Import Row and Col\nimport TextArea from 'antd/es/input/TextArea';\nimport PCListDisplay from './pc-list';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClusterSetup = ({\n  onClusterInitialized\n}) => {\n  _s();\n  const [form] = Form.useForm();\n  const [pcNamesInput, setPcNamesInput] = useState('');\n  useEffect(() => {\n    const names = pcNamesInput.split('\\n').map(name => name.trim()).filter(name => name !== '');\n    const initialPcs = names.map(name => ({\n      nameOrIp: name\n    }));\n    form.setFieldsValue({\n      pcs: initialPcs\n    });\n  }, [pcNamesInput, form]);\n  const handleTextAreaChange = e => {\n    setPcNamesInput(e.target.value);\n  };\n  const handleInitHec = async values => {\n    message.loading('Initializing HEC cluster...', 0);\n    const pcsToSend = (values.pcs || []).map(pc => ({\n      ...pc,\n      nameOrIp: pc.nameOrIp ? `${pc.nameOrIp}:1` : '' // Append :1 to the name/IP\n    }));\n    const clusterConfig = {\n      numPcs: pcsToSend.length,\n      // Number of PCs derived from the parsed input\n      pcs: pcsToSend\n    };\n    try {\n      const response = await fetch('http://localhost:5000/init-hec', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(clusterConfig)\n      });\n      message.destroy();\n      if (response.ok) {\n        const result = await response.json();\n        message.success('HEC cluster initialized successfully!');\n        console.log('Backend response (init-hec):', result);\n        onClusterInitialized();\n      } else {\n        const errorText = await response.text();\n        message.error(`HEC initialization failed: ${errorText}`);\n        console.error('Backend error (init-hec):', response.status, errorText);\n      }\n    } catch (error) {\n      message.destroy();\n      message.error('Network error or server unavailable during HEC initialization.');\n      console.error('Fetch error (init-hec):', error);\n    }\n  };\n  const currentPcs = form.getFieldValue('pcs') || [];\n  return /*#__PURE__*/_jsxDEV(Row, {\n    gutter: 20,\n    style: {\n      maxWidth: 1000,\n      margin: '20px auto'\n    },\n    children: [\" \", /*#__PURE__*/_jsxDEV(Col, {\n      span: 8,\n      children: [\" \", /*#__PURE__*/_jsxDEV(PCListDisplay, {\n        pcs: currentPcs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      span: 16,\n      children: [\" \", /*#__PURE__*/_jsxDEV(Form, {\n        form: form,\n        layout: \"vertical\",\n        onFinish: handleInitHec,\n        initialValues: {\n          pcs: []\n        },\n        style: {\n          padding: '20px',\n          border: '1px solid #eee',\n          borderRadius: '8px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"PC Names/IPs in the Cluster (one per line)\",\n          required: true,\n          children: /*#__PURE__*/_jsxDEV(TextArea, {\n            placeholder: \"Enter the names or IPs of the PCs, one per line\",\n            style: {\n              width: '100%',\n              minHeight: '120px'\n            },\n            value: pcNamesInput,\n            onChange: handleTextAreaChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          style: {\n            marginTop: 20\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            size: \"large\",\n            style: {\n              width: '100%'\n            },\n            disabled: currentPcs.length === 0,\n            children: \"Init Hecatoncheir\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(ClusterSetup, \"XfvTQgK5dlduduTHRiqXvPAlOsM=\", false, function () {\n  return [Form.useForm];\n});\n_c = ClusterSetup;\nexport default ClusterSetup;\nvar _c;\n$RefreshReg$(_c, \"ClusterSetup\");","map":{"version":3,"names":["React","useState","useEffect","Form","Button","message","Row","Col","TextArea","PCListDisplay","jsxDEV","_jsxDEV","ClusterSetup","onClusterInitialized","_s","form","useForm","pcNamesInput","setPcNamesInput","names","split","map","name","trim","filter","initialPcs","nameOrIp","setFieldsValue","pcs","handleTextAreaChange","e","target","value","handleInitHec","values","loading","pcsToSend","pc","clusterConfig","numPcs","length","response","fetch","method","headers","body","JSON","stringify","destroy","ok","result","json","success","console","log","errorText","text","error","status","currentPcs","getFieldValue","gutter","style","maxWidth","margin","children","span","fileName","_jsxFileName","lineNumber","columnNumber","layout","onFinish","initialValues","padding","border","borderRadius","Item","label","required","placeholder","width","minHeight","onChange","marginTop","type","htmlType","size","disabled","_c","$RefreshReg$"],"sources":["/home/command/Desktop/hecatoncheir-app/frontend/src/components/set-up-hecatoncheir.tsx"],"sourcesContent":["// src/components/ClusterSetup.tsx\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, Space, message, Row, Col } from 'antd'; // Import Row and Col\nimport TextArea from 'antd/es/input/TextArea';\nimport PCListDisplay from './pc-list';\n\ninterface ClusterSetupProps {\n  onClusterInitialized: () => void;\n}\n\nconst ClusterSetup: React.FC<ClusterSetupProps> = ({ onClusterInitialized }) => {\n  const [form] = Form.useForm();\n  const [pcNamesInput, setPcNamesInput] = useState<string>('');\n\n  useEffect(() => {\n    const names = pcNamesInput\n      .split('\\n')\n      .map((name) => name.trim())\n      .filter((name) => name !== '');\n    const initialPcs = names.map((name) => ({ nameOrIp: name }));\n    form.setFieldsValue({ pcs: initialPcs });\n  }, [pcNamesInput, form]);\n\n  const handleTextAreaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setPcNamesInput(e.target.value);\n  };\n\n  const handleInitHec = async (values: any) => {\n    message.loading('Initializing HEC cluster...', 0);\n\n    const pcsToSend = (values.pcs || []).map((pc: { nameOrIp: string }) => ({\n      ...pc,\n      nameOrIp: pc.nameOrIp ? `${pc.nameOrIp}:1` : '', // Append :1 to the name/IP\n    }));\n\n    const clusterConfig = {\n      numPcs: pcsToSend.length, // Number of PCs derived from the parsed input\n      pcs: pcsToSend,\n    };\n\n    try {\n      const response = await fetch('http://localhost:5000/init-hec', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(clusterConfig),\n      });\n\n      message.destroy();\n\n      if (response.ok) {\n        const result = await response.json();\n        message.success('HEC cluster initialized successfully!');\n        console.log('Backend response (init-hec):', result);\n        onClusterInitialized();\n      } else {\n        const errorText = await response.text();\n        message.error(`HEC initialization failed: ${errorText}`);\n        console.error('Backend error (init-hec):', response.status, errorText);\n      }\n    } catch (error) {\n      message.destroy();\n      message.error('Network error or server unavailable during HEC initialization.');\n      console.error('Fetch error (init-hec):', error);\n    }\n  };\n\n  const currentPcs = form.getFieldValue('pcs') || [];\n\n  return (\n    <Row gutter={20} style={{ maxWidth: 1000, margin: '20px auto' }}> {/* Use Ant Design Row for layout */}\n      <Col span={8}> {/* Left column for PCListDisplay */}\n        <PCListDisplay pcs={currentPcs} />\n      </Col>\n      <Col span={16}> {/* Right column for the main form */}\n        <Form\n          form={form}\n          layout=\"vertical\"\n          onFinish={handleInitHec}\n          initialValues={{ pcs: [] }}\n          style={{ padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}\n        >\n          <Form.Item label=\"PC Names/IPs in the Cluster (one per line)\" required>\n            <TextArea\n              placeholder=\"Enter the names or IPs of the PCs, one per line\"\n              style={{ width: '100%', minHeight: '120px' }}\n              value={pcNamesInput}\n              onChange={handleTextAreaChange}\n            />\n          </Form.Item>\n\n          <Form.Item style={{ marginTop: 20 }}>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              size=\"large\"\n              style={{ width: '100%' }}\n              disabled={currentPcs.length === 0}\n            >\n              Init Hecatoncheir\n            </Button>\n          </Form.Item>\n        </Form>\n      </Col>\n    </Row>\n  );\n};\n\nexport default ClusterSetup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}