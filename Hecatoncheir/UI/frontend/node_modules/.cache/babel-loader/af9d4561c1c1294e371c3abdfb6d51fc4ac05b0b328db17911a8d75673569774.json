{"ast":null,"code":"var _jsxFileName = \"/home/command/Desktop/hecatoncheir-app/frontend/src/components/home-page.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Form, Select, Upload, Button, message, Space } from 'antd';\nimport { UploadOutlined, ReloadOutlined } from '@ant-design/icons';\nimport Input from 'antd/es/input/Input';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\nconst HomePage = () => {\n  _s();\n  const [form] = Form.useForm();\n  const [queryType, setQueryType] = useState(null);\n  const [spatialDataType, setSpatialDataType] = useState(null); // State for conditional rendering\n  const [querySetType, setQuerySetType] = useState(null); // State for conditional rendering\n  const [predicate, setPredicate] = useState(null); // State for conditional rendering\n\n  const handleQueryTypeChange = value => {\n    setQueryType(value);\n    // Reset dependent states and form fields when query type changes\n    setSpatialDataType(null);\n    setQuerySetType(null);\n    setPredicate(null);\n    form.resetFields(['spatialDataType', 'querySetType', 'predicate', 'datasetFile',\n    // Reset file fields too\n    'queryDatasetFile', 'leftDatasetFile', 'rightDatasetFile', 'kValue']);\n  };\n\n  // Common Upload Props for all file inputs\n  const commonUploadProps = {\n    accept: '.bin',\n    // Only allow .bin files\n    beforeUpload: file => {\n      const isBin = file.name.endsWith('.bin');\n      if (!isBin) {\n        message.error(`${file.name} is not a .bin file!`);\n      }\n      return isBin || Upload.LIST_IGNORE; // Prevent upload if not .bin\n    },\n    maxCount: 1,\n    // Only allow one file\n    onRemove: () => {\n      // Ant Design's Form.Item will handle clearing the fileList internally when onRemove is triggered.\n      // No manual state update or form.resetFields for the file is needed here.\n      return true; // Allow removal\n    }\n  };\n  const handleFinish = async values => {\n    message.loading('Processing query...', 0);\n    const formData = new FormData();\n\n    // Always append queryType, as it's the base\n    formData.append('queryType', values.queryType || '');\n\n    // Conditionally append other form values and files based on queryType\n    if (values.queryType === 'rangeQuery' || values.queryType === 'knnQuery') {\n      if (values.spatialDataType) formData.append('spatialDataType', values.spatialDataType);\n      if (values.querySetType) formData.append('querySetType', values.querySetType);\n      if (values.datasetFile && values.datasetFile.length > 0 && values.datasetFile[0].originFileObj) {\n        formData.append('datasetFile', values.datasetFile[0].originFileObj);\n      }\n      if (values.queryDatasetFile && values.queryDatasetFile.length > 0 && values.queryDatasetFile[0].originFileObj) {\n        formData.append('queryDatasetFile', values.queryDatasetFile[0].originFileObj);\n      }\n      if (values.queryType === 'knnQuery' && values.kValue) {\n        formData.append('kValue', values.kValue);\n      }\n    } else if (values.queryType === 'spatialJoins') {\n      if (values.predicate) formData.append('predicate', values.predicate);\n      if (values.leftDatasetFile && values.leftDatasetFile.length > 0 && values.leftDatasetFile[0].originFileObj) {\n        formData.append('leftDatasetFile', values.leftDatasetFile[0].originFileObj);\n      }\n      if (values.rightDatasetFile && values.rightDatasetFile.length > 0 && values.rightDatasetFile[0].originFileObj) {\n        formData.append('rightDatasetFile', values.rightDatasetFile[0].originFileObj);\n      }\n    }\n    try {\n      const response = await fetch('http://localhost:5000/process-query', {\n        method: 'POST',\n        body: formData\n      });\n      message.destroy();\n      if (response.ok) {\n        const result = await response.json();\n        message.success('Query submitted successfully!');\n        console.log('Backend response:', result);\n      } else {\n        const errorText = await response.text();\n        message.error(`Query failed: ${errorText}`);\n        console.error('Backend error:', response.status, errorText);\n      }\n    } catch (error) {\n      message.destroy();\n      message.error('Network error or server unavailable.');\n      console.error('Fetch error:', error);\n    }\n  };\n  const handleResetForm = () => {\n    form.resetFields();\n    setQueryType(null);\n    setSpatialDataType(null);\n    setQuerySetType(null);\n    setPredicate(null);\n    message.info('Form cleared!');\n  };\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    layout: \"vertical\",\n    onFinish: handleFinish,\n    initialValues: {\n      queryType: null\n    },\n    style: {\n      maxWidth: 600,\n      margin: '20px auto',\n      padding: '20px',\n      border: '1px solid #eee',\n      borderRadius: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"queryType\",\n      label: \"Query Type\",\n      rules: [{\n        required: true,\n        message: 'Please select a query type!'\n      }] // Query Type is always required\n      ,\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        placeholder: \"Select a query type\",\n        onChange: handleQueryTypeChange,\n        children: [/*#__PURE__*/_jsxDEV(Option, {\n          value: \"rangeQuery\",\n          children: \"Range Query\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Option, {\n          value: \"knnQuery\",\n          children: \"KNN Query\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Option, {\n          value: \"spatialJoins\",\n          children: \"Spatial Joins\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), queryType && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [(queryType === 'rangeQuery' || queryType === 'knnQuery') && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"datasetFile\",\n          label: \"Dataset File\",\n          valuePropName: \"fileList\",\n          getValueFromEvent: e => e && e.fileList,\n          rules: [{\n            required: true,\n            message: 'Please select a dataset file!'\n          }] // Required for Range/KNN\n          ,\n          children: /*#__PURE__*/_jsxDEV(Upload, {\n            ...commonUploadProps,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 33\n              }, this),\n              style: {\n                width: '100%'\n              },\n              children: \"Select Dataset File (.bin)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"queryDatasetFile\",\n          label: \"Query Dataset File\",\n          valuePropName: \"fileList\",\n          getValueFromEvent: e => e && e.fileList,\n          rules: [{\n            required: true,\n            message: 'Please select a query dataset file!'\n          }] // Required for Range/KNN\n          ,\n          children: /*#__PURE__*/_jsxDEV(Upload, {\n            ...commonUploadProps,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 33\n              }, this),\n              style: {\n                width: '100%'\n              },\n              children: \"Select Query Dataset File (.bin)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }, this), queryType === 'rangeQuery' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"spatialDataType\",\n            label: \"Spatial Data Type\",\n            rules: [{\n              required: true,\n              message: 'Please select a spatial data type!'\n            }] // Required for Range\n            ,\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              placeholder: \"Select spatial data type\",\n              onChange: value => setSpatialDataType(value),\n              children: [/*#__PURE__*/_jsxDEV(Option, {\n                value: \"polygon\",\n                children: \"Polygon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Option, {\n                value: \"points\",\n                children: \"Points\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Option, {\n                value: \"line\",\n                children: \"Line\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"querySetType\",\n            label: \"Query Set Type\",\n            rules: [{\n              required: true,\n              message: 'Please select a query set type!'\n            }] // Required for Range\n            ,\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              placeholder: \"Select query set type\",\n              onChange: value => setQuerySetType(value),\n              children: [/*#__PURE__*/_jsxDEV(Option, {\n                value: \"polygon\",\n                children: \"Polygon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Option, {\n                value: \"box\",\n                children: \"Box\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true), queryType === 'knnQuery' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"spatialDataType\",\n            label: \"Spatial Data Type\",\n            rules: [{\n              required: true,\n              message: 'Please select a spatial data type!'\n            }] // Required for KNN\n            ,\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              placeholder: \"Select spatial data type\",\n              onChange: value => setSpatialDataType(value),\n              children: [/*#__PURE__*/_jsxDEV(Option, {\n                value: \"polygon\",\n                children: \"Polygon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Option, {\n                value: \"points\",\n                children: \"Points\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Option, {\n                value: \"line\",\n                children: \"Line\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"querySetType\",\n            label: \"Query Set Type\",\n            rules: [{\n              required: true,\n              message: 'Please select a query set type!'\n            }] // Required for KNN\n            ,\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              placeholder: \"Select query set type\",\n              onChange: value => setQuerySetType(value),\n              children: [/*#__PURE__*/_jsxDEV(Option, {\n                value: \"point\",\n                children: \"Point\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Option, {\n                value: \"polygon\",\n                children: \"Polygon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"kValue\",\n            label: \"K Value (for KNN)\",\n            rules: [{\n              required: true,\n              message: 'Please input K value!'\n            }] // Required for KNN\n            ,\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              type: \"number\",\n              placeholder: \"Enter K value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true), queryType === 'spatialJoins' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"leftDatasetFile\",\n          label: \"Left Dataset File\",\n          valuePropName: \"fileList\",\n          getValueFromEvent: e => e && e.fileList,\n          rules: [{\n            required: true,\n            message: 'Please select a left dataset file!'\n          }] // Required for Spatial Joins\n          ,\n          children: /*#__PURE__*/_jsxDEV(Upload, {\n            ...commonUploadProps,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 33\n              }, this),\n              style: {\n                width: '100%'\n              },\n              children: \"Select Left Dataset File (.bin)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"rightDatasetFile\",\n          label: \"Right Dataset File\",\n          valuePropName: \"fileList\",\n          getValueFromEvent: e => e && e.fileList,\n          rules: [{\n            required: true,\n            message: 'Please select a right dataset file!'\n          }] // Required for Spatial Joins\n          ,\n          children: /*#__PURE__*/_jsxDEV(Upload, {\n            ...commonUploadProps,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 33\n              }, this),\n              style: {\n                width: '100%'\n              },\n              children: \"Select Right Dataset File (.bin)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"predicate\",\n          label: \"Predicate\",\n          rules: [{\n            required: true,\n            message: 'Please select a predicate!'\n          }] // Required for Spatial Joins\n          ,\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            placeholder: \"Select predicate\",\n            onChange: value => setPredicate(value),\n            children: [/*#__PURE__*/_jsxDEV(Option, {\n              value: \"intersect\",\n              children: \"Intersect\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"inside\",\n              children: \"Inside\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"contains\",\n              children: \"Contains\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"covers\",\n              children: \"Covers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"coveredBy\",\n              children: \"Covered By\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"equals\",\n              children: \"Equals\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"meet\",\n              children: \"Meet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"findRelation\",\n              children: \"Find Relation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Form.Item, {\n        style: {\n          marginLeft: \"55%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Space, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            type: \"default\",\n            icon: /*#__PURE__*/_jsxDEV(ReloadOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 44\n            }, this),\n            onClick: handleResetForm,\n            children: \"Clear Form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: \"Submit Query\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"T0NSj/xIp7szj+PTPxa/QZkcvJQ=\", false, function () {\n  return [Form.useForm];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","Form","Select","Upload","Button","message","Space","UploadOutlined","ReloadOutlined","Input","jsxDEV","_jsxDEV","Fragment","_Fragment","Option","HomePage","_s","form","useForm","queryType","setQueryType","spatialDataType","setSpatialDataType","querySetType","setQuerySetType","predicate","setPredicate","handleQueryTypeChange","value","resetFields","commonUploadProps","accept","beforeUpload","file","isBin","name","endsWith","error","LIST_IGNORE","maxCount","onRemove","handleFinish","values","loading","formData","FormData","append","datasetFile","length","originFileObj","queryDatasetFile","kValue","leftDatasetFile","rightDatasetFile","response","fetch","method","body","destroy","ok","result","json","success","console","log","errorText","text","status","handleResetForm","info","layout","onFinish","initialValues","style","maxWidth","margin","padding","border","borderRadius","children","Item","label","rules","required","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","valuePropName","getValueFromEvent","e","fileList","icon","width","type","marginLeft","onClick","htmlType","_c","$RefreshReg$"],"sources":["/home/command/Desktop/hecatoncheir-app/frontend/src/components/home-page.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Form, Select, Upload, Button, message, Space } from 'antd';\nimport { UploadOutlined, ReloadOutlined } from '@ant-design/icons';\nimport type { UploadFile, UploadProps } from 'antd/es/upload/interface';\nimport Input from 'antd/es/input/Input';\n\nconst { Option } = Select;\n\ntype QueryType = 'rangeQuery' | 'knnQuery' | 'spatialJoins' | null;\ntype SpatialDataType = 'polygon' | 'points' | 'line' | null;\ntype RangeQuerySetType = 'polygon' | 'box' | null;\ntype KNNQuerySetType = 'point' | 'polygon' | null;\ntype PredicateType = 'intersect' | 'inside' | 'contains' | 'covers' | 'coveredBy' | 'equals' | 'meet' | 'findRelation' | null;\n\nconst HomePage: React.FC = () => {\n  const [form] = Form.useForm();\n  const [queryType, setQueryType] = useState<QueryType>(null);\n  const [spatialDataType, setSpatialDataType] = useState<SpatialDataType>(null); // State for conditional rendering\n  const [querySetType, setQuerySetType] = useState<RangeQuerySetType | KNNQuerySetType | null>(null); // State for conditional rendering\n  const [predicate, setPredicate] = useState<PredicateType>(null); // State for conditional rendering\n\n  const handleQueryTypeChange = (value: QueryType) => {\n    setQueryType(value);\n    // Reset dependent states and form fields when query type changes\n    setSpatialDataType(null);\n    setQuerySetType(null);\n    setPredicate(null);\n    form.resetFields([\n      'spatialDataType',\n      'querySetType',\n      'predicate',\n      'datasetFile',       // Reset file fields too\n      'queryDatasetFile',\n      'leftDatasetFile',\n      'rightDatasetFile',\n      'kValue',\n    ]);\n  };\n\n  // Common Upload Props for all file inputs\n  const commonUploadProps: UploadProps = {\n    accept: '.bin', // Only allow .bin files\n    beforeUpload: (file) => {\n      const isBin = file.name.endsWith('.bin');\n      if (!isBin) {\n        message.error(`${file.name} is not a .bin file!`);\n      }\n      return isBin || Upload.LIST_IGNORE; // Prevent upload if not .bin\n    },\n    maxCount: 1, // Only allow one file\n    onRemove: () => {\n        // Ant Design's Form.Item will handle clearing the fileList internally when onRemove is triggered.\n        // No manual state update or form.resetFields for the file is needed here.\n        return true; // Allow removal\n    },\n  };\n\n  const handleFinish = async (values: any) => {\n    message.loading('Processing query...', 0);\n\n    const formData = new FormData();\n\n    // Always append queryType, as it's the base\n    formData.append('queryType', values.queryType || '');\n\n    // Conditionally append other form values and files based on queryType\n    if (values.queryType === 'rangeQuery' || values.queryType === 'knnQuery') {\n      if (values.spatialDataType) formData.append('spatialDataType', values.spatialDataType);\n      if (values.querySetType) formData.append('querySetType', values.querySetType);\n\n      if (values.datasetFile && values.datasetFile.length > 0 && values.datasetFile[0].originFileObj) {\n        formData.append('datasetFile', values.datasetFile[0].originFileObj);\n      }\n      if (values.queryDatasetFile && values.queryDatasetFile.length > 0 && values.queryDatasetFile[0].originFileObj) {\n        formData.append('queryDatasetFile', values.queryDatasetFile[0].originFileObj);\n      }\n\n      if (values.queryType === 'knnQuery' && values.kValue) {\n        formData.append('kValue', values.kValue);\n      }\n    } else if (values.queryType === 'spatialJoins') {\n      if (values.predicate) formData.append('predicate', values.predicate);\n\n      if (values.leftDatasetFile && values.leftDatasetFile.length > 0 && values.leftDatasetFile[0].originFileObj) {\n        formData.append('leftDatasetFile', values.leftDatasetFile[0].originFileObj);\n      }\n      if (values.rightDatasetFile && values.rightDatasetFile.length > 0 && values.rightDatasetFile[0].originFileObj) {\n        formData.append('rightDatasetFile', values.rightDatasetFile[0].originFileObj);\n      }\n    }\n\n    try {\n        const response = await fetch('http://localhost:5000/process-query', {\n            method: 'POST',\n            body: formData,\n        });\n\n        message.destroy();\n\n        if (response.ok) {\n            const result = await response.json();\n            message.success('Query submitted successfully!');\n            console.log('Backend response:', result);\n        } else {\n            const errorText = await response.text();\n            message.error(`Query failed: ${errorText}`);\n            console.error('Backend error:', response.status, errorText);\n        }\n    } catch (error) {\n        message.destroy();\n        message.error('Network error or server unavailable.');\n        console.error('Fetch error:', error);\n    }\n  };\n\n  const handleResetForm = () => {\n    form.resetFields();\n    setQueryType(null);\n    setSpatialDataType(null);\n    setQuerySetType(null);\n    setPredicate(null);\n    message.info('Form cleared!');\n  };\n\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      onFinish={handleFinish}\n      initialValues={{ queryType: null }}\n      style={{ maxWidth: 600, margin: '20px auto', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}\n    >\n      <Form.Item\n        name=\"queryType\"\n        label=\"Query Type\"\n        rules={[{ required: true, message: 'Please select a query type!'}]} // Query Type is always required\n      >\n        <Select placeholder=\"Select a query type\" onChange={handleQueryTypeChange}>\n          <Option value=\"rangeQuery\">Range Query</Option>\n          <Option value=\"knnQuery\">KNN Query</Option>\n          <Option value=\"spatialJoins\">Spatial Joins</Option>\n        </Select>\n      </Form.Item>\n\n      {queryType && (\n        <>\n          {/* --- Common File Uploads for Range & KNN --- */}\n          {(queryType === 'rangeQuery' || queryType === 'knnQuery') && (\n            <>\n              <Form.Item\n                name=\"datasetFile\"\n                label=\"Dataset File\"\n                valuePropName=\"fileList\"\n                getValueFromEvent={(e) => e && e.fileList}\n                rules={[{ required: true, message: 'Please select a dataset file!' }]} // Required for Range/KNN\n              >\n                <Upload {...commonUploadProps}>\n                  <Button icon={<UploadOutlined />} style={{ width: '100%' }}>Select Dataset File (.bin)</Button>\n                </Upload>\n              </Form.Item>\n\n              <Form.Item\n                name=\"queryDatasetFile\"\n                label=\"Query Dataset File\"\n                valuePropName=\"fileList\"\n                getValueFromEvent={(e) => e && e.fileList}\n                rules={[{ required: true, message: 'Please select a query dataset file!' }]} // Required for Range/KNN\n              >\n                <Upload {...commonUploadProps}>\n                  <Button icon={<UploadOutlined />} style={{ width: '100%' }}>Select Query Dataset File (.bin)</Button>\n                </Upload>\n              </Form.Item>\n\n              {/* --- Specific Fields for Range Query --- */}\n              {queryType === 'rangeQuery' && (\n                <>\n                  <Form.Item\n                    name=\"spatialDataType\"\n                    label=\"Spatial Data Type\"\n                    rules={[{ required: true, message: 'Please select a spatial data type!' }]} // Required for Range\n                  >\n                    <Select placeholder=\"Select spatial data type\" onChange={(value: SpatialDataType) => setSpatialDataType(value)}>\n                      <Option value=\"polygon\">Polygon</Option>\n                      <Option value=\"points\">Points</Option>\n                      <Option value=\"line\">Line</Option>\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"querySetType\"\n                    label=\"Query Set Type\"\n                    rules={[{ required: true, message: 'Please select a query set type!' }]} // Required for Range\n                  >\n                    <Select placeholder=\"Select query set type\" onChange={(value: RangeQuerySetType) => setQuerySetType(value)}>\n                      <Option value=\"polygon\">Polygon</Option>\n                      <Option value=\"box\">Box</Option>\n                    </Select>\n                  </Form.Item>\n                </>\n              )}\n\n              {/* --- Specific Fields for KNN Query --- */}\n              {queryType === 'knnQuery' && (\n                <>\n                  <Form.Item\n                    name=\"spatialDataType\"\n                    label=\"Spatial Data Type\"\n                    rules={[{ required: true, message: 'Please select a spatial data type!' }]} // Required for KNN\n                  >\n                    <Select placeholder=\"Select spatial data type\" onChange={(value: SpatialDataType) => setSpatialDataType(value)}>\n                      <Option value=\"polygon\">Polygon</Option>\n                      <Option value=\"points\">Points</Option>\n                      <Option value=\"line\">Line</Option>\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"querySetType\"\n                    label=\"Query Set Type\"\n                    rules={[{ required: true, message: 'Please select a query set type!' }]} // Required for KNN\n                  >\n                    <Select placeholder=\"Select query set type\" onChange={(value: KNNQuerySetType) => setQuerySetType(value)}>\n                      <Option value=\"point\">Point</Option>\n                      <Option value=\"polygon\">Polygon</Option>\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"kValue\"\n                    label=\"K Value (for KNN)\"\n                    rules={[{ required: true, message: 'Please input K value!' }]} // Required for KNN\n                  >\n                    <Input type=\"number\" placeholder=\"Enter K value\" />\n                  </Form.Item>\n                </>\n              )}\n            </>\n          )}\n\n          {/* --- Fields for Spatial Joins --- */}\n          {queryType === 'spatialJoins' && (\n            <>\n              <Form.Item\n                name=\"leftDatasetFile\"\n                label=\"Left Dataset File\"\n                valuePropName=\"fileList\"\n                getValueFromEvent={(e) => e && e.fileList}\n                rules={[{ required: true, message: 'Please select a left dataset file!' }]} // Required for Spatial Joins\n              >\n                <Upload {...commonUploadProps}>\n                  <Button icon={<UploadOutlined />} style={{ width: '100%' }}>Select Left Dataset File (.bin)</Button>\n                </Upload>\n              </Form.Item>\n\n              <Form.Item\n                name=\"rightDatasetFile\"\n                label=\"Right Dataset File\"\n                valuePropName=\"fileList\"\n                getValueFromEvent={(e) => e && e.fileList}\n                rules={[{ required: true, message: 'Please select a right dataset file!' }]} // Required for Spatial Joins\n              >\n                <Upload {...commonUploadProps}>\n                  <Button icon={<UploadOutlined />} style={{ width: '100%' }}>Select Right Dataset File (.bin)</Button>\n                </Upload>\n              </Form.Item>\n\n              <Form.Item\n                name=\"predicate\"\n                label=\"Predicate\"\n                rules={[{ required: true, message: 'Please select a predicate!' }]} // Required for Spatial Joins\n              >\n                <Select placeholder=\"Select predicate\" onChange={(value: PredicateType) => setPredicate(value)}>\n                  <Option value=\"intersect\">Intersect</Option>\n                  <Option value=\"inside\">Inside</Option>\n                  <Option value=\"contains\">Contains</Option>\n                  <Option value=\"covers\">Covers</Option>\n                  <Option value=\"coveredBy\">Covered By</Option>\n                  <Option value=\"equals\">Equals</Option>\n                  <Option value=\"meet\">Meet</Option>\n                  <Option value=\"findRelation\">Find Relation</Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n\n          {/* --- Action Buttons --- */}\n          <Form.Item style={{marginLeft:\"55%\"}}>\n            <Space>\n              <Button type=\"default\" icon={<ReloadOutlined />} onClick={handleResetForm}>\n                Clear Form\n              </Button>\n              <Button type=\"primary\" htmlType=\"submit\">\n                Submit Query\n              </Button>\n            </Space>\n          </Form.Item>\n        </>\n      )}\n    </Form>\n  );\n};\n\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}