{"ast":null,"code":"var _jsxFileName = \"/home/command/Desktop/hecatoncheir-app/frontend/src/components/set-up-hecatoncheir.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, Space, message } from 'antd';\nimport TextArea from 'antd/es/input/TextArea';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClusterSetup = ({\n  onClusterInitialized\n}) => {\n  _s();\n  const [form] = Form.useForm();\n  const [pcNamesInput, setPcNamesInput] = useState('');\n  useEffect(() => {\n    const names = pcNamesInput.split('\\n').map(name => name.trim()).filter(name => name !== '');\n    const initialPcs = names.map(name => ({\n      nameOrIp: name\n    }));\n    form.setFieldsValue({\n      pcs: initialPcs\n    });\n  }, [pcNamesInput, form]);\n  const handleTextAreaChange = e => {\n    setPcNamesInput(e.target.value);\n  };\n  const handleInitHec = async values => {\n    message.loading('Initializing HEC cluster...', 0);\n    const pcsToSend = (values.pcs || []).map(pc => ({\n      ...pc,\n      nameOrIp: pc.nameOrIp ? `${pc.nameOrIp}:1` : '' // Append :1 to the name/IP\n    }));\n    const clusterConfig = {\n      numPcs: pcsToSend.length,\n      // Number of PCs derived from the parsed input\n      pcs: pcsToSend\n    };\n    try {\n      const response = await fetch('http://localhost:5000/init-hec', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(clusterConfig)\n      });\n      message.destroy();\n      if (response.ok) {\n        const result = await response.json();\n        message.success('HEC cluster initialized successfully!');\n        console.log('Backend response (init-hec):', result);\n        onClusterInitialized();\n      } else {\n        const errorText = await response.text();\n        message.error(`HEC initialization failed: ${errorText}`);\n        console.error('Backend error (init-hec):', response.status, errorText);\n      }\n    } catch (error) {\n      message.destroy();\n      message.error('Network error or server unavailable during HEC initialization.');\n      console.error('Fetch error (init-hec):', error);\n    }\n  };\n  const currentPcs = form.getFieldValue('pcs') || [];\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    layout: \"vertical\",\n    onFinish: handleInitHec,\n    initialValues: {\n      pcs: []\n    },\n    style: {\n      maxWidth: 600,\n      margin: '20px auto',\n      padding: '20px',\n      border: '1px solid #eee',\n      borderRadius: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"PC Names/IPs in the Cluster (one per line)\",\n      required: true,\n      children: /*#__PURE__*/_jsxDEV(TextArea, {\n        placeholder: \"Enter the names or IPs of the PCs, one per line\",\n        style: {\n          width: '100%',\n          minHeight: '120px'\n        },\n        value: pcNamesInput,\n        onChange: handleTextAreaChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), currentPcs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxHeight: currentPcs.length > 5 ? '50vh' : 'none',\n        overflowY: currentPcs.length > 5 ? 'auto' : 'visible',\n        border: '1px solid #f0f0f0',\n        padding: '10px',\n        borderRadius: '4px',\n        backgroundColor: '#fafafa',\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Identified PCs:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), currentPcs.map((pc, index) => /*#__PURE__*/_jsxDEV(Space, {\n        style: {\n          display: 'flex',\n          marginBottom: 8\n        },\n        align: \"baseline\",\n        children: /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: ['pcs', index, 'nameOrIp'],\n          label: `PC ${index + 1}`,\n          initialValue: pc.nameOrIp,\n          style: {\n            flexGrow: 1,\n            marginBottom: 0\n          },\n          readOnly: true,\n          children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        marginTop: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        size: \"large\",\n        style: {\n          width: '100%'\n        },\n        disabled: currentPcs.length === 0,\n        children: \"Init Hecatoncheir\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(ClusterSetup, \"XfvTQgK5dlduduTHRiqXvPAlOsM=\", false, function () {\n  return [Form.useForm];\n});\n_c = ClusterSetup;\nexport default ClusterSetup;\nvar _c;\n$RefreshReg$(_c, \"ClusterSetup\");","map":{"version":3,"names":["React","useState","useEffect","Form","Input","Button","Space","message","TextArea","jsxDEV","_jsxDEV","ClusterSetup","onClusterInitialized","_s","form","useForm","pcNamesInput","setPcNamesInput","names","split","map","name","trim","filter","initialPcs","nameOrIp","setFieldsValue","pcs","handleTextAreaChange","e","target","value","handleInitHec","values","loading","pcsToSend","pc","clusterConfig","numPcs","length","response","fetch","method","headers","body","JSON","stringify","destroy","ok","result","json","success","console","log","errorText","text","error","status","currentPcs","getFieldValue","layout","onFinish","initialValues","style","maxWidth","margin","padding","border","borderRadius","children","Item","label","required","placeholder","width","minHeight","onChange","fileName","_jsxFileName","lineNumber","columnNumber","maxHeight","overflowY","backgroundColor","marginTop","index","display","marginBottom","align","initialValue","flexGrow","readOnly","type","htmlType","size","disabled","_c","$RefreshReg$"],"sources":["/home/command/Desktop/hecatoncheir-app/frontend/src/components/set-up-hecatoncheir.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, Space, message } from 'antd';\nimport TextArea from 'antd/es/input/TextArea';\n\ninterface ClusterSetupProps {\n  onClusterInitialized: () => void;\n}\n\nconst ClusterSetup: React.FC<ClusterSetupProps> = ({ onClusterInitialized }) => {\n  const [form] = Form.useForm();\n  const [pcNamesInput, setPcNamesInput] = useState<string>('');\n\n  useEffect(() => {\n    const names = pcNamesInput\n      .split('\\n')\n      .map((name) => name.trim())\n      .filter((name) => name !== '');\n    const initialPcs = names.map((name) => ({ nameOrIp: name }));\n    form.setFieldsValue({ pcs: initialPcs });\n  }, [pcNamesInput, form]);\n\n  const handleTextAreaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setPcNamesInput(e.target.value);\n  };\n\n  const handleInitHec = async (values: any) => {\n    message.loading('Initializing HEC cluster...', 0);\n\n    const pcsToSend = (values.pcs || []).map((pc: { nameOrIp: string }) => ({\n      ...pc,\n      nameOrIp: pc.nameOrIp ? `${pc.nameOrIp}:1` : '', // Append :1 to the name/IP\n    }));\n\n    const clusterConfig = {\n      numPcs: pcsToSend.length, // Number of PCs derived from the parsed input\n      pcs: pcsToSend,\n    };\n\n    try {\n      const response = await fetch('http://localhost:5000/init-hec', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(clusterConfig),\n      });\n\n      message.destroy();\n\n      if (response.ok) {\n        const result = await response.json();\n        message.success('HEC cluster initialized successfully!');\n        console.log('Backend response (init-hec):', result);\n        onClusterInitialized();\n      } else {\n        const errorText = await response.text();\n        message.error(`HEC initialization failed: ${errorText}`);\n        console.error('Backend error (init-hec):', response.status, errorText);\n      }\n    } catch (error) {\n      message.destroy();\n      message.error('Network error or server unavailable during HEC initialization.');\n      console.error('Fetch error (init-hec):', error);\n    }\n  };\n\n  const currentPcs = form.getFieldValue('pcs') || [];\n\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      onFinish={handleInitHec}\n      initialValues={{ pcs: [] }}\n      style={{ maxWidth: 600, margin: '20px auto', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}\n    >\n      <Form.Item label=\"PC Names/IPs in the Cluster (one per line)\" required>\n        <TextArea\n          placeholder=\"Enter the names or IPs of the PCs, one per line\"\n          style={{ width: '100%', minHeight: '120px' }}\n          value={pcNamesInput}\n          onChange={handleTextAreaChange}\n        />\n      </Form.Item>\n\n      {currentPcs.length > 0 && (\n        <div style={{\n          maxHeight: currentPcs.length > 5 ? '50vh' : 'none',\n          overflowY: currentPcs.length > 5 ? 'auto' : 'visible',\n          border: '1px solid #f0f0f0',\n          padding: '10px',\n          borderRadius: '4px',\n          backgroundColor: '#fafafa',\n          marginTop: '10px'\n        }}>\n          <h4>Identified PCs:</h4>\n          {currentPcs.map((pc: { nameOrIp: string }, index: number) => (\n            <Space key={index} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\n              <Form.Item\n                name={['pcs', index, 'nameOrIp']}\n                label={`PC ${index + 1}`}\n                initialValue={pc.nameOrIp}\n                style={{ flexGrow: 1, marginBottom: 0 }}\n                readOnly\n              >\n                <Input/>\n              </Form.Item>\n            </Space>\n          ))}\n        </div>\n      )}\n\n      <Form.Item style={{ marginTop: 20 }}>\n        <Button\n          type=\"primary\"\n          htmlType=\"submit\"\n          size=\"large\"\n          style={{ width: '100%' }}\n          disabled={currentPcs.length === 0}\n        >\n          Init Hecatoncheir\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default ClusterSetup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}