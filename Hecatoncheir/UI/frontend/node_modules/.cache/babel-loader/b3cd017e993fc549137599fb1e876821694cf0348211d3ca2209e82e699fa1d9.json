{"ast":null,"code":"var _jsxFileName = \"/home/command/Desktop/hecatoncheir-app/frontend/src/components/set-up-hecatoncheir.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { Form, Button, message } from 'antd';\nimport TextArea from 'antd/es/input/TextArea';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClusterSetup = ({\n  onClusterInitialized,\n  pcNamesInput,\n  setPcNamesInput,\n  currentPcs\n}) => {\n  _s();\n  const [form] = Form.useForm();\n  useEffect(() => {\n    form.setFieldsValue({\n      pcNames: pcNamesInput\n    });\n  }, [pcNamesInput, form]);\n  const handleTextAreaChange = e => {\n    setPcNamesInput(e.target.value);\n  };\n  const handleInitHec = async values => {\n    message.loading('Initializing HEC cluster...', 0);\n    const names = values.pcNames.split('\\n').map(name => name.trim()).filter(name => name !== '');\n    const pcsToSend = names.map(name => ({\n      nameOrIp: name\n    }));\n    console.log('PCs to send to backend:', pcsToSend);\n    const clusterConfig = {\n      numPcs: pcsToSend.length,\n      pcs: pcsToSend\n    };\n    try {\n      const response = await fetch('http://localhost:5000/init-hec', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(clusterConfig)\n      });\n      message.destroy();\n      if (response.ok) {\n        const result = await response.json();\n        message.success('HEC cluster initialized successfully!');\n        console.log('Backend response (init-hec):', result);\n        onClusterInitialized();\n      } else {\n        const errorText = await response.text();\n        message.error(`HEC initialization failed: ${errorText}`);\n        console.error('Backend error (init-hec):', response.status, errorText);\n      }\n    } catch (error) {\n      message.destroy();\n      message.error('Network error or server unavailable during HEC initialization.');\n      console.error('Fetch error (init-hec):', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    layout: \"vertical\",\n    initialValues: {\n      pcNames: pcNamesInput\n    },\n    onFinish: handleInitHec,\n    style: {\n      padding: '20px',\n      border: '1px solid #eee',\n      borderRadius: '8px',\n      marginTop: '1.5%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Node aliases/IPs in the Cluster (one per line)\",\n      name: \"pcNames\",\n      rules: [{\n        required: true,\n        message: 'Please enter at least one PC name or IP.',\n        validator: (_, value) => {\n          const names = (value || '').split('\\n').map(name => name.trim()).filter(name => name !== '');\n          if (names.length === 0) {\n            return Promise.reject('Please enter at least one PC name or IP.');\n          }\n          return Promise.resolve();\n        }\n      }],\n      children: /*#__PURE__*/_jsxDEV(TextArea, {\n        placeholder: \"Enter the aliases or IPs of the nodes, one per line\",\n        style: {\n          width: '100%',\n          minHeight: '120px',\n          maxHeight: '63vh'\n        },\n        value: pcNamesInput,\n        onChange: handleTextAreaChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        marginTop: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        size: \"large\",\n        style: {\n          width: '100%'\n        },\n        disabled: pcNamesInput.trim().length === 0,\n        children: \"Init Hecatoncheir\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(ClusterSetup, \"hm6PaQ/QYB/X6ENq1nmkdh1TV0k=\", false, function () {\n  return [Form.useForm];\n});\n_c = ClusterSetup;\nexport default ClusterSetup;\nvar _c;\n$RefreshReg$(_c, \"ClusterSetup\");","map":{"version":3,"names":["React","useEffect","Form","Button","message","TextArea","jsxDEV","_jsxDEV","ClusterSetup","onClusterInitialized","pcNamesInput","setPcNamesInput","currentPcs","_s","form","useForm","setFieldsValue","pcNames","handleTextAreaChange","e","target","value","handleInitHec","values","loading","names","split","map","name","trim","filter","pcsToSend","nameOrIp","console","log","clusterConfig","numPcs","length","pcs","response","fetch","method","headers","body","JSON","stringify","destroy","ok","result","json","success","errorText","text","error","status","layout","initialValues","onFinish","style","padding","border","borderRadius","marginTop","children","Item","label","rules","required","validator","_","Promise","reject","resolve","placeholder","width","minHeight","maxHeight","onChange","fileName","_jsxFileName","lineNumber","columnNumber","type","htmlType","size","disabled","_c","$RefreshReg$"],"sources":["/home/command/Desktop/hecatoncheir-app/frontend/src/components/set-up-hecatoncheir.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Form, Button, message } from 'antd';\nimport TextArea from 'antd/es/input/TextArea';\n\ninterface PC {\n  nameOrIp: string;\n}\n\ninterface ClusterSetupProps {\n  onClusterInitialized: () => void;\n  pcNamesInput: string;\n  setPcNamesInput: (value: string) => void;\n  currentPcs: PC[];\n}\n\nconst ClusterSetup: React.FC<ClusterSetupProps> = ({\n  onClusterInitialized,\n  pcNamesInput,\n  setPcNamesInput,\n  currentPcs,\n}) => {\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    form.setFieldsValue({ pcNames: pcNamesInput });\n  }, [pcNamesInput, form]);\n\n  const handleTextAreaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setPcNamesInput(e.target.value);\n  };\n\n  const handleInitHec = async (values: { pcNames: string }) => {\n    message.loading('Initializing HEC cluster...', 0);\n\n    const names = values.pcNames\n      .split('\\n')\n      .map((name) => name.trim())\n      .filter((name) => name !== '');\n\n    const pcsToSend = names.map((name) => ({ nameOrIp: name }));\n\n    console.log('PCs to send to backend:', pcsToSend);\n\n    const clusterConfig = {\n      numPcs: pcsToSend.length,\n      pcs: pcsToSend,\n    };\n\n    try {\n      const response = await fetch('http://localhost:5000/init-hec', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(clusterConfig),\n      });\n\n      message.destroy();\n\n      if (response.ok) {\n        const result = await response.json();\n        message.success('HEC cluster initialized successfully!');\n        console.log('Backend response (init-hec):', result);\n        onClusterInitialized();\n      } else {\n        const errorText = await response.text();\n        message.error(`HEC initialization failed: ${errorText}`);\n        console.error('Backend error (init-hec):', response.status, errorText);\n      }\n    } catch (error) {\n      message.destroy();\n      message.error('Network error or server unavailable during HEC initialization.');\n      console.error('Fetch error (init-hec):', error);\n    }\n  };\n\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      initialValues={{ pcNames: pcNamesInput }}\n      onFinish={handleInitHec}\n      style={{ padding: '20px', border: '1px solid #eee', borderRadius: '8px', marginTop: '1.5%' }}\n    >\n      <Form.Item\n        label=\"Node aliases/IPs in the Cluster (one per line)\"\n        name=\"pcNames\"\n        rules={[\n          {\n            required: true,\n            message: 'Please enter at least one PC name or IP.',\n            validator: (_, value) => {\n              const names = (value || '')\n                .split('\\n')\n                .map((name: string) => name.trim())\n                .filter((name: string) => name !== '');\n              if (names.length === 0) {\n                return Promise.reject('Please enter at least one PC name or IP.');\n              }\n              return Promise.resolve();\n            },\n          },\n        ]}\n      >\n        <TextArea\n          placeholder=\"Enter the aliases or IPs of the nodes, one per line\"\n          style={{ width: '100%', minHeight: '120px', maxHeight:'63vh' }}\n          value={pcNamesInput}\n          onChange={handleTextAreaChange}\n        />\n      </Form.Item>\n\n      <Form.Item style={{ marginTop: 20 }}>\n        <Button\n          type=\"primary\"\n          htmlType=\"submit\"\n          size=\"large\"\n          style={{ width: '100%' }}\n          disabled={pcNamesInput.trim().length === 0}\n        >\n          Init Hecatoncheir\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default ClusterSetup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}