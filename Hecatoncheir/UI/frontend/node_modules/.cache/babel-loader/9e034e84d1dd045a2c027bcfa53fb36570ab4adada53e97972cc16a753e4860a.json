{"ast":null,"code":"var _jsxFileName = \"/home/command/Desktop/hecatoncheir-app/frontend/src/components/set-up-hecatoncheir.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { Form, Button, message } from 'antd';\nimport TextArea from 'antd/es/input/TextArea';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClusterSetup = ({\n  onClusterInitialized,\n  pcNamesInput,\n  setPcNamesInput,\n  currentPcs\n}) => {\n  _s();\n  const [form] = Form.useForm();\n  const handleTextAreaChange = e => {\n    setPcNamesInput(e.target.value);\n    const names = e.target.value.split('\\n').map(name => name.trim()).filter(name => name !== '');\n    form.setFieldsValue({\n      pcs: names.map(name => ({\n        nameOrIp: name\n      }))\n    });\n  };\n  const handleInitHec = async values => {\n    console.log(\"values: \" + values.pcs);\n    message.loading('Initializing HEC cluster...', 0);\n    const pcsToSend = (values.pcs || []).map(pc => ({\n      ...pc,\n      nameOrIp: pc.nameOrIp\n    }));\n    console.log(\"PCs to send to backend:\", pcsToSend);\n    const clusterConfig = {\n      numPcs: pcsToSend.length,\n      pcs: pcsToSend\n    };\n    try {\n      const response = await fetch('http://localhost:5000/init-hec', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(clusterConfig)\n      });\n      message.destroy(); // Hide loading message\n\n      if (response.ok) {\n        const result = await response.json();\n        message.success('HEC cluster initialized successfully!');\n        console.log('Backend response (init-hec):', result);\n        onClusterInitialized();\n      } else {\n        const errorText = await response.text();\n        message.error(`HEC initialization failed: ${errorText}`);\n        console.error('Backend error (init-hec):', response.status, errorText);\n      }\n    } catch (error) {\n      message.destroy(); // Hide loading message on network error\n      message.error('Network error or server unavailable during HEC initialization.');\n      console.error('Fetch error (init-hec):', error);\n    }\n  };\n\n  // This useEffect ensures the form's 'pcs' field is initialized/updated when pcNamesInput changes\n  useEffect(() => {\n    const names = pcNamesInput.split('\\n').map(name => name.trim()).filter(name => name !== '');\n    form.setFieldsValue({\n      pcs: names.map(name => ({\n        nameOrIp: name\n      }))\n    });\n  }, [pcNamesInput, form]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    layout: \"vertical\",\n    initialValues: {\n      pcs: []\n    },\n    style: {\n      padding: '20px',\n      border: '1px solid #eee',\n      borderRadius: '8px',\n      marginTop: \"1.5%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"PC Names/IPs in the Cluster (one per line)\",\n      required: true,\n      children: /*#__PURE__*/_jsxDEV(TextArea, {\n        placeholder: \"Enter the names or IPs of the PCs, one per line\",\n        style: {\n          width: '100%',\n          minHeight: '120px'\n        },\n        value: pcNamesInput,\n        onChange: handleTextAreaChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        marginTop: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleInitHec,\n        type: \"primary\",\n        htmlType: \"submit\",\n        size: \"large\",\n        style: {\n          width: '100%'\n        },\n        disabled: currentPcs.length === 0,\n        children: \"Init Hecatoncheir\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(ClusterSetup, \"hm6PaQ/QYB/X6ENq1nmkdh1TV0k=\", false, function () {\n  return [Form.useForm];\n});\n_c = ClusterSetup;\nexport default ClusterSetup;\nvar _c;\n$RefreshReg$(_c, \"ClusterSetup\");","map":{"version":3,"names":["React","useEffect","Form","Button","message","TextArea","jsxDEV","_jsxDEV","ClusterSetup","onClusterInitialized","pcNamesInput","setPcNamesInput","currentPcs","_s","form","useForm","handleTextAreaChange","e","target","value","names","split","map","name","trim","filter","setFieldsValue","pcs","nameOrIp","handleInitHec","values","console","log","loading","pcsToSend","pc","clusterConfig","numPcs","length","response","fetch","method","headers","body","JSON","stringify","destroy","ok","result","json","success","errorText","text","error","status","layout","initialValues","style","padding","border","borderRadius","marginTop","children","Item","label","required","placeholder","width","minHeight","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","htmlType","size","disabled","_c","$RefreshReg$"],"sources":["/home/command/Desktop/hecatoncheir-app/frontend/src/components/set-up-hecatoncheir.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Form, Button, message} from 'antd';\nimport TextArea from 'antd/es/input/TextArea';\n\n\ninterface PC {\n  nameOrIp: string;\n}\n\ninterface ClusterSetupProps {\n  onClusterInitialized: () => void;\n  pcNamesInput: string;\n  setPcNamesInput: (value: string) => void;\n  currentPcs: string[];\n}\n\nconst ClusterSetup: React.FC<ClusterSetupProps> = ({\n  onClusterInitialized,\n  pcNamesInput,\n  setPcNamesInput,\n  currentPcs,\n}) => {\n  const [form] = Form.useForm();\n\n  const handleTextAreaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setPcNamesInput(e.target.value);\n    const names = e.target.value\n      .split('\\n')\n      .map((name) => name.trim())\n      .filter((name) => name !== '');\n\n    form.setFieldsValue({ pcs: names.map((name) => ({ nameOrIp: name })) });\n\n  };\n\n  const handleInitHec = async (values: any) => {\n    console.log(\"values: \" + values.pcs)\n    message.loading('Initializing HEC cluster...', 0);\n\n    const pcsToSend = (values.pcs || []).map((pc: { nameOrIp: string }) => ({\n      ...pc,\n      nameOrIp: pc.nameOrIp\n    }));\n\n    console.log(\"PCs to send to backend:\", pcsToSend)\n\n    const clusterConfig = {\n      numPcs: pcsToSend.length,\n      pcs: pcsToSend,\n    };\n\n    try {\n      const response = await fetch('http://localhost:5000/init-hec', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(clusterConfig),\n      });\n\n      message.destroy(); // Hide loading message\n\n      if (response.ok) {\n        const result = await response.json();\n        message.success('HEC cluster initialized successfully!');\n        console.log('Backend response (init-hec):', result);\n        onClusterInitialized();\n      } else {\n        const errorText = await response.text();\n        message.error(`HEC initialization failed: ${errorText}`);\n        console.error('Backend error (init-hec):', response.status, errorText);\n      }\n    } catch (error) {\n      message.destroy(); // Hide loading message on network error\n      message.error('Network error or server unavailable during HEC initialization.');\n      console.error('Fetch error (init-hec):', error);\n    }\n  };\n\n\n  // This useEffect ensures the form's 'pcs' field is initialized/updated when pcNamesInput changes\n  useEffect(() => {\n    const names = pcNamesInput\n      .split('\\n')\n      .map((name) => name.trim())\n      .filter((name) => name !== '');\n    form.setFieldsValue({ pcs: names.map((name) => ({ nameOrIp: name })) });\n  }, [pcNamesInput, form]);\n\n\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      initialValues={{ pcs: [] }}\n      style={{ padding: '20px', border: '1px solid #eee', borderRadius: '8px', marginTop:\"1.5%\" }}\n    >\n      <Form.Item label=\"PC Names/IPs in the Cluster (one per line)\" required>\n        <TextArea\n          placeholder=\"Enter the names or IPs of the PCs, one per line\"\n          style={{ width: '100%', minHeight: '120px' }}\n          value={pcNamesInput}\n          onChange={handleTextAreaChange}\n        />\n      </Form.Item>\n\n      <Form.Item style={{ marginTop: 20 }}>\n        <Button\n        onClick={handleInitHec}\n          type=\"primary\"\n          htmlType=\"submit\"\n          size=\"large\"\n          style={{ width: '100%' }}\n          disabled={currentPcs.length === 0}\n        >\n          Init Hecatoncheir\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default ClusterSetup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}