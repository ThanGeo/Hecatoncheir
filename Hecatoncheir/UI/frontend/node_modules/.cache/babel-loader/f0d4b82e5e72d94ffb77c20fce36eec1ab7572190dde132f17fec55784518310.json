{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { prepareComponentToken, prepareToken } from '.';\nimport { resetComponent } from '../../style';\nimport { genPresetColor, genStyleHooks } from '../../theme/internal';\n// ============================== Ribbon ==============================\nconst genRibbonStyle = token => {\n  const {\n    antCls,\n    badgeFontHeight,\n    marginXS,\n    badgeRibbonOffset,\n    calc\n  } = token;\n  const ribbonPrefixCls = `${antCls}-ribbon`;\n  const ribbonWrapperPrefixCls = `${antCls}-ribbon-wrapper`;\n  const statusRibbonPreset = genPresetColor(token, (colorKey, {\n    darkColor\n  }) => ({\n    [`&${ribbonPrefixCls}-color-${colorKey}`]: {\n      background: darkColor,\n      color: darkColor\n    }\n  }));\n  return {\n    [ribbonWrapperPrefixCls]: {\n      position: 'relative'\n    },\n    [ribbonPrefixCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      top: marginXS,\n      padding: `0 ${unit(token.paddingXS)}`,\n      color: token.colorPrimary,\n      lineHeight: unit(badgeFontHeight),\n      whiteSpace: 'nowrap',\n      backgroundColor: token.colorPrimary,\n      borderRadius: token.borderRadiusSM,\n      [`${ribbonPrefixCls}-text`]: {\n        color: token.badgeTextColor\n      },\n      [`${ribbonPrefixCls}-corner`]: {\n        position: 'absolute',\n        top: '100%',\n        width: badgeRibbonOffset,\n        height: badgeRibbonOffset,\n        color: 'currentcolor',\n        border: `${unit(calc(badgeRibbonOffset).div(2).equal())} solid`,\n        transform: token.badgeRibbonCornerTransform,\n        transformOrigin: 'top',\n        filter: token.badgeRibbonCornerFilter\n      }\n    }), statusRibbonPreset), {\n      [`&${ribbonPrefixCls}-placement-end`]: {\n        insetInlineEnd: calc(badgeRibbonOffset).mul(-1).equal(),\n        borderEndEndRadius: 0,\n        [`${ribbonPrefixCls}-corner`]: {\n          insetInlineEnd: 0,\n          borderInlineEndColor: 'transparent',\n          borderBlockEndColor: 'transparent'\n        }\n      },\n      [`&${ribbonPrefixCls}-placement-start`]: {\n        insetInlineStart: calc(badgeRibbonOffset).mul(-1).equal(),\n        borderEndStartRadius: 0,\n        [`${ribbonPrefixCls}-corner`]: {\n          insetInlineStart: 0,\n          borderBlockEndColor: 'transparent',\n          borderInlineStartColor: 'transparent'\n        }\n      },\n      // ====================== RTL =======================\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  };\n};\n// ============================== Export ==============================\nexport default genStyleHooks(['Badge', 'Ribbon'], token => {\n  const badgeToken = prepareToken(token);\n  return genRibbonStyle(badgeToken);\n}, prepareComponentToken);","map":{"version":3,"names":["unit","prepareComponentToken","prepareToken","resetComponent","genPresetColor","genStyleHooks","genRibbonStyle","token","antCls","badgeFontHeight","marginXS","badgeRibbonOffset","calc","ribbonPrefixCls","ribbonWrapperPrefixCls","statusRibbonPreset","colorKey","darkColor","background","color","position","Object","assign","top","padding","paddingXS","colorPrimary","lineHeight","whiteSpace","backgroundColor","borderRadius","borderRadiusSM","badgeTextColor","width","height","border","div","equal","transform","badgeRibbonCornerTransform","transformOrigin","filter","badgeRibbonCornerFilter","insetInlineEnd","mul","borderEndEndRadius","borderInlineEndColor","borderBlockEndColor","insetInlineStart","borderEndStartRadius","borderInlineStartColor","direction","badgeToken"],"sources":["/home/command/Desktop/hecatoncheir-app/hecatoncheir-ui/frontend/node_modules/antd/es/badge/style/ribbon.js"],"sourcesContent":["import { unit } from '@ant-design/cssinjs';\nimport { prepareComponentToken, prepareToken } from '.';\nimport { resetComponent } from '../../style';\nimport { genPresetColor, genStyleHooks } from '../../theme/internal';\n// ============================== Ribbon ==============================\nconst genRibbonStyle = token => {\n  const {\n    antCls,\n    badgeFontHeight,\n    marginXS,\n    badgeRibbonOffset,\n    calc\n  } = token;\n  const ribbonPrefixCls = `${antCls}-ribbon`;\n  const ribbonWrapperPrefixCls = `${antCls}-ribbon-wrapper`;\n  const statusRibbonPreset = genPresetColor(token, (colorKey, {\n    darkColor\n  }) => ({\n    [`&${ribbonPrefixCls}-color-${colorKey}`]: {\n      background: darkColor,\n      color: darkColor\n    }\n  }));\n  return {\n    [ribbonWrapperPrefixCls]: {\n      position: 'relative'\n    },\n    [ribbonPrefixCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      top: marginXS,\n      padding: `0 ${unit(token.paddingXS)}`,\n      color: token.colorPrimary,\n      lineHeight: unit(badgeFontHeight),\n      whiteSpace: 'nowrap',\n      backgroundColor: token.colorPrimary,\n      borderRadius: token.borderRadiusSM,\n      [`${ribbonPrefixCls}-text`]: {\n        color: token.badgeTextColor\n      },\n      [`${ribbonPrefixCls}-corner`]: {\n        position: 'absolute',\n        top: '100%',\n        width: badgeRibbonOffset,\n        height: badgeRibbonOffset,\n        color: 'currentcolor',\n        border: `${unit(calc(badgeRibbonOffset).div(2).equal())} solid`,\n        transform: token.badgeRibbonCornerTransform,\n        transformOrigin: 'top',\n        filter: token.badgeRibbonCornerFilter\n      }\n    }), statusRibbonPreset), {\n      [`&${ribbonPrefixCls}-placement-end`]: {\n        insetInlineEnd: calc(badgeRibbonOffset).mul(-1).equal(),\n        borderEndEndRadius: 0,\n        [`${ribbonPrefixCls}-corner`]: {\n          insetInlineEnd: 0,\n          borderInlineEndColor: 'transparent',\n          borderBlockEndColor: 'transparent'\n        }\n      },\n      [`&${ribbonPrefixCls}-placement-start`]: {\n        insetInlineStart: calc(badgeRibbonOffset).mul(-1).equal(),\n        borderEndStartRadius: 0,\n        [`${ribbonPrefixCls}-corner`]: {\n          insetInlineStart: 0,\n          borderBlockEndColor: 'transparent',\n          borderInlineStartColor: 'transparent'\n        }\n      },\n      // ====================== RTL =======================\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  };\n};\n// ============================== Export ==============================\nexport default genStyleHooks(['Badge', 'Ribbon'], token => {\n  const badgeToken = prepareToken(token);\n  return genRibbonStyle(badgeToken);\n}, prepareComponentToken);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}