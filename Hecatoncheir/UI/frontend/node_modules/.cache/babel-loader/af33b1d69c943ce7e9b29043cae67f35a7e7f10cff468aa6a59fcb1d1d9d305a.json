{"ast":null,"code":"var _jsxFileName = \"/home/command/Desktop/hecatoncheir-app/src/components/home-page.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { Form, Select, Upload, Button, message, Space } from 'antd';\nimport { UploadOutlined, ReloadOutlined } from '@ant-design/icons';\nimport Input from 'antd/es/input/Input';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\n\n// Define specific types for better type safety and clarity\n\nconst HomePage = () => {\n  _s();\n  const [form] = Form.useForm();\n  const [queryType, setQueryType] = useState(null);\n  const [spatialDataType, setSpatialDataType] = useState(null);\n  const [querySetType, setQuerySetType] = useState(null);\n  const [predicate, setPredicate] = useState(null);\n  const [datasetFile, setDatasetFile] = useState(null);\n  const [queryDatasetFile, setQueryDatasetFile] = useState(null); // For Range and KNN\n  const [leftDatasetFile, setLeftDatasetFile] = useState(null); // For Spatial Joins\n  const [rightDatasetFile, setRightDatasetFile] = useState(null); // For Spatial Joins\n\n  const handleQueryTypeChange = value => {\n    setQueryType(value);\n    setSpatialDataType(null);\n    setQuerySetType(null);\n    setPredicate(null);\n    setDatasetFile(null);\n    setQueryDatasetFile(null);\n    setLeftDatasetFile(null);\n    setRightDatasetFile(null);\n    // reset all relevant fields by their form item names\n    form.resetFields(['spatialDataType', 'querySetType', 'predicate', 'datasetFile', 'queryDatasetFile', 'leftDatasetFile', 'rightDatasetFile', 'kValue']);\n  };\n  const commonUploadProps = {\n    accept: '.bin',\n    // Only allow .bin files\n    beforeUpload: file => {\n      const isBin = file.name.endsWith('.bin');\n      if (!isBin) {\n        message.error(`${file.name} is not a .bin file!`);\n      }\n      return isBin || Upload.LIST_IGNORE; // Prevent upload if not .bin\n    },\n    maxCount: 1,\n    // Only allow one file\n    onRemove: file => {\n      // Logic to clear the respective file state when removed\n      if (file.uid === (datasetFile === null || datasetFile === void 0 ? void 0 : datasetFile.uid)) setDatasetFile(null);\n      if (file.uid === (queryDatasetFile === null || queryDatasetFile === void 0 ? void 0 : queryDatasetFile.uid)) setQueryDatasetFile(null);\n      if (file.uid === (leftDatasetFile === null || leftDatasetFile === void 0 ? void 0 : leftDatasetFile.uid)) setLeftDatasetFile(null);\n      if (file.uid === (rightDatasetFile === null || rightDatasetFile === void 0 ? void 0 : rightDatasetFile.uid)) setRightDatasetFile(null);\n      return true; // Allow removal\n    }\n  };\n  const customRequest = useCallback((options, setter) => {\n    const {\n      file,\n      onSuccess\n    } = options;\n    setter(file);\n    onSuccess('ok'); // Mark as successful even though we're not uploading\n  }, []);\n  const handleFinish = values => {\n    console.log('Form values:', values);\n    console.log('Dataset File:', datasetFile);\n    console.log('Query Dataset File:', queryDatasetFile);\n    console.log('Left Dataset File:', leftDatasetFile);\n    console.log('Right Dataset File:', rightDatasetFile);\n    // Here you would process the files and other form values for submission\n    message.success('Form submitted!');\n  };\n  const handleResetForm = () => {\n    form.resetFields();\n    setQueryType(null);\n    setSpatialDataType(null);\n    setQuerySetType(null);\n    setPredicate(null);\n    setDatasetFile(null);\n    setQueryDatasetFile(null);\n    setLeftDatasetFile(null);\n    setRightDatasetFile(null);\n    message.info('Form cleared!');\n  };\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    layout: \"vertical\",\n    onFinish: handleFinish,\n    initialValues: {\n      queryType: null\n    },\n    style: {\n      maxWidth: 600,\n      margin: '20px auto',\n      padding: '20px',\n      border: '1px solid #eee',\n      borderRadius: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"queryType\",\n      label: \"Query Type\",\n      rules: [{\n        required: true,\n        message: 'Please select a query type!'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        placeholder: \"Select a query type\",\n        onChange: handleQueryTypeChange,\n        children: [/*#__PURE__*/_jsxDEV(Option, {\n          value: \"rangeQuery\",\n          children: \"Range Query\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Option, {\n          value: \"knnQuery\",\n          children: \"KNN Query\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Option, {\n          value: \"spatialJoins\",\n          children: \"Spatial Joins\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), queryType && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [(queryType === 'rangeQuery' || queryType === 'knnQuery') && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Dataset File\",\n          style: {\n            width: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(Upload, {\n            ...commonUploadProps,\n            customRequest: options => customRequest(options, setDatasetFile),\n            fileList: datasetFile ? [datasetFile] : [],\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 33\n              }, this),\n              style: {\n                width: '100%'\n              },\n              children: \"Select Dataset File (.bin)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Query Dataset File\",\n          style: {\n            width: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(Upload, {\n            ...commonUploadProps,\n            customRequest: options => customRequest(options, setQueryDatasetFile),\n            fileList: queryDatasetFile ? [queryDatasetFile] : [],\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 33\n              }, this),\n              style: {\n                width: '100%'\n              },\n              children: \"Select Query Dataset File (.bin)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }, this), queryType === 'rangeQuery' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"spatialDataType\",\n            label: \"Spatial Data Type\",\n            rules: [{\n              required: true,\n              message: 'Please select a spatial data type!'\n            }],\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              placeholder: \"Select spatial data type\",\n              onChange: value => setSpatialDataType(value),\n              children: [/*#__PURE__*/_jsxDEV(Option, {\n                value: \"polygon\",\n                children: \"Polygon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Option, {\n                value: \"points\",\n                children: \"Points\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Option, {\n                value: \"line\",\n                children: \"Line\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"querySetType\",\n            label: \"Query Set Type\",\n            rules: [{\n              required: true,\n              message: 'Please select a query set type!'\n            }],\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              placeholder: \"Select query set type\",\n              onChange: value => setQuerySetType(value),\n              children: [/*#__PURE__*/_jsxDEV(Option, {\n                value: \"polygon\",\n                children: \"Polygon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Option, {\n                value: \"box\",\n                children: \"Box\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true), queryType === 'knnQuery' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"spatialDataType\",\n            label: \"Spatial Data Type\",\n            rules: [{\n              required: true,\n              message: 'Please select a spatial data type!'\n            }],\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              placeholder: \"Select spatial data type\",\n              onChange: value => setSpatialDataType(value),\n              children: [/*#__PURE__*/_jsxDEV(Option, {\n                value: \"polygon\",\n                children: \"Polygon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Option, {\n                value: \"points\",\n                children: \"Points\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Option, {\n                value: \"line\",\n                children: \"Line\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"querySetType\",\n            label: \"Query Set Type\",\n            rules: [{\n              required: true,\n              message: 'Please select a query set type!'\n            }],\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              placeholder: \"Select query set type\",\n              onChange: value => setQuerySetType(value),\n              children: [/*#__PURE__*/_jsxDEV(Option, {\n                value: \"point\",\n                children: \"Point\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Option, {\n                value: \"polygon\",\n                children: \"Polygon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"kValue\",\n            label: \"K Value (for KNN)\",\n            rules: [{\n              required: true,\n              message: 'Please input K value!'\n            }],\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              type: \"number\",\n              placeholder: \"Enter K value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true), queryType === 'spatialJoins' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Left Dataset File\",\n          style: {\n            width: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(Upload, {\n            ...commonUploadProps,\n            customRequest: options => customRequest(options, setLeftDatasetFile),\n            fileList: leftDatasetFile ? [leftDatasetFile] : [],\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 33\n              }, this),\n              style: {\n                width: '100%'\n              },\n              children: \"Select Left Dataset File (.bin)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Right Dataset File\",\n          style: {\n            width: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(Upload, {\n            ...commonUploadProps,\n            customRequest: options => customRequest(options, setRightDatasetFile),\n            fileList: rightDatasetFile ? [rightDatasetFile] : [],\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 33\n              }, this),\n              style: {\n                width: '100%'\n              },\n              children: \"Select Right Dataset File (.bin)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"predicate\",\n          label: \"Predicate\",\n          rules: [{\n            required: true,\n            message: 'Please select a predicate!'\n          }],\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            placeholder: \"Select predicate\",\n            onChange: value => setPredicate(value),\n            children: [/*#__PURE__*/_jsxDEV(Option, {\n              value: \"intersect\",\n              children: \"Intersect\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"inside\",\n              children: \"Inside\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"contains\",\n              children: \"Contains\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"covers\",\n              children: \"Covers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"coveredBy\",\n              children: \"Covered By\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"equals\",\n              children: \"Equals\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"meet\",\n              children: \"Meet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"findRelation\",\n              children: \"Find Relation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Form.Item, {\n        style: {\n          marginLeft: \"55%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Space, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            type: \"default\",\n            icon: /*#__PURE__*/_jsxDEV(ReloadOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 44\n            }, this),\n            onClick: handleResetForm,\n            children: \"Clear Form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: \"Submit Query\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"/k2SjFlz3pUr6q1Z4m9MjSEwkS4=\", false, function () {\n  return [Form.useForm];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useCallback","Form","Select","Upload","Button","message","Space","UploadOutlined","ReloadOutlined","Input","jsxDEV","_jsxDEV","Fragment","_Fragment","Option","HomePage","_s","form","useForm","queryType","setQueryType","spatialDataType","setSpatialDataType","querySetType","setQuerySetType","predicate","setPredicate","datasetFile","setDatasetFile","queryDatasetFile","setQueryDatasetFile","leftDatasetFile","setLeftDatasetFile","rightDatasetFile","setRightDatasetFile","handleQueryTypeChange","value","resetFields","commonUploadProps","accept","beforeUpload","file","isBin","name","endsWith","error","LIST_IGNORE","maxCount","onRemove","uid","customRequest","options","setter","onSuccess","handleFinish","values","console","log","success","handleResetForm","info","layout","onFinish","initialValues","style","maxWidth","margin","padding","border","borderRadius","children","Item","label","rules","required","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","width","fileList","icon","type","marginLeft","onClick","htmlType","_c","$RefreshReg$"],"sources":["/home/command/Desktop/hecatoncheir-app/src/components/home-page.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Form, Select, Upload, Button, message, Space } from 'antd';\nimport { UploadOutlined, ReloadOutlined } from '@ant-design/icons';\nimport type { UploadFile, UploadProps } from 'antd/es/upload/interface';\nimport Input from 'antd/es/input/Input';\n\nconst { Option } = Select;\n\n// Define specific types for better type safety and clarity\ntype QueryType = 'rangeQuery' | 'knnQuery' | 'spatialJoins' | null;\ntype SpatialDataType = 'polygon' | 'points' | 'line' | null;\ntype RangeQuerySetType = 'polygon' | 'box' | null;\ntype KNNQuerySetType = 'point' | 'polygon' | null;\ntype PredicateType = 'intersect' | 'inside' | 'contains' | 'covers' | 'coveredBy' | 'equals' | 'meet' | 'findRelation' | null;\n\nconst HomePage: React.FC = () => {\n  const [form] = Form.useForm();\n  const [queryType, setQueryType] = useState<QueryType>(null);\n  const [spatialDataType, setSpatialDataType] = useState<SpatialDataType>(null);\n  const [querySetType, setQuerySetType] = useState<RangeQuerySetType | KNNQuerySetType | null>(null);\n  const [predicate, setPredicate] = useState<PredicateType>(null);\n\n  const [datasetFile, setDatasetFile] = useState<UploadFile | null>(null);\n  const [queryDatasetFile, setQueryDatasetFile] = useState<UploadFile | null>(null); // For Range and KNN\n  const [leftDatasetFile, setLeftDatasetFile] = useState<UploadFile | null>(null); // For Spatial Joins\n  const [rightDatasetFile, setRightDatasetFile] = useState<UploadFile | null>(null); // For Spatial Joins\n\n\n  const handleQueryTypeChange = (value: QueryType) => {\n    setQueryType(value);\n    setSpatialDataType(null);\n    setQuerySetType(null);   \n    setPredicate(null);      \n    setDatasetFile(null);\n    setQueryDatasetFile(null);\n    setLeftDatasetFile(null);\n    setRightDatasetFile(null);\n    // reset all relevant fields by their form item names\n    form.resetFields([\n      'spatialDataType',\n      'querySetType',\n      'predicate',\n      'datasetFile',\n      'queryDatasetFile',\n      'leftDatasetFile',\n      'rightDatasetFile',\n      'kValue',\n    ]);\n  };\n\n  const commonUploadProps: UploadProps = {\n    accept: '.bin', // Only allow .bin files\n    beforeUpload: (file) => {\n      const isBin = file.name.endsWith('.bin');\n      if (!isBin) {\n        message.error(`${file.name} is not a .bin file!`);\n      }\n      return isBin || Upload.LIST_IGNORE; // Prevent upload if not .bin\n    },\n    maxCount: 1, // Only allow one file\n    onRemove: (file) => {\n      // Logic to clear the respective file state when removed\n      if (file.uid === datasetFile?.uid) setDatasetFile(null);\n      if (file.uid === queryDatasetFile?.uid) setQueryDatasetFile(null);\n      if (file.uid === leftDatasetFile?.uid) setLeftDatasetFile(null);\n      if (file.uid === rightDatasetFile?.uid) setRightDatasetFile(null);\n      return true; // Allow removal\n    },\n  };\n\n  const customRequest = useCallback((options: any, setter: React.Dispatch<React.SetStateAction<UploadFile | null>>) => {\n    const { file, onSuccess } = options;\n    setter(file);\n    onSuccess('ok'); // Mark as successful even though we're not uploading\n  }, []);\n\n  const handleFinish = (values: any) => {\n    console.log('Form values:', values);\n    console.log('Dataset File:', datasetFile);\n    console.log('Query Dataset File:', queryDatasetFile);\n    console.log('Left Dataset File:', leftDatasetFile);\n    console.log('Right Dataset File:', rightDatasetFile);\n    // Here you would process the files and other form values for submission\n    message.success('Form submitted!');\n  };\n\n  const handleResetForm = () => {\n    form.resetFields();\n    setQueryType(null);\n    setSpatialDataType(null);\n    setQuerySetType(null);\n    setPredicate(null);\n    setDatasetFile(null);\n    setQueryDatasetFile(null);\n    setLeftDatasetFile(null);\n    setRightDatasetFile(null);\n    message.info('Form cleared!');\n  };\n\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      onFinish={handleFinish}\n      initialValues={{ queryType: null }}\n      style={{ maxWidth: 600, margin: '20px auto', padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}\n    >\n      <Form.Item\n        name=\"queryType\"\n        label=\"Query Type\"\n        rules={[{ required: true, message: 'Please select a query type!'}]}\n      >\n        <Select placeholder=\"Select a query type\" onChange={handleQueryTypeChange}>\n          <Option value=\"rangeQuery\">Range Query</Option>\n          <Option value=\"knnQuery\">KNN Query</Option>\n          <Option value=\"spatialJoins\">Spatial Joins</Option>\n        </Select>\n      </Form.Item>\n\n      {queryType && (\n        <>\n          {/* --- Common File Uploads for Range & KNN --- */}\n          {(queryType === 'rangeQuery' || queryType === 'knnQuery') && (\n            <>\n              <Form.Item label=\"Dataset File\" style={{ width: '100%' }}>\n                <Upload\n                  {...commonUploadProps}\n                  customRequest={(options) => customRequest(options, setDatasetFile)}\n                  fileList={datasetFile ? [datasetFile] : []}\n                >\n                  <Button icon={<UploadOutlined />} style={{ width: '100%' }}>Select Dataset File (.bin)</Button>\n                </Upload>\n              </Form.Item>\n\n              <Form.Item label=\"Query Dataset File\" style={{ width: '100%' }}>\n                <Upload\n                  {...commonUploadProps}\n                  customRequest={(options) => customRequest(options, setQueryDatasetFile)}\n                  fileList={queryDatasetFile ? [queryDatasetFile] : []}\n                >\n                  <Button icon={<UploadOutlined />} style={{ width: '100%' }}>Select Query Dataset File (.bin)</Button>\n                </Upload>\n              </Form.Item>\n\n              {/* --- Specific Fields for Range Query --- */}\n              {queryType === 'rangeQuery' && (\n                <>\n                  <Form.Item\n                    name=\"spatialDataType\"\n                    label=\"Spatial Data Type\"\n                    rules={[{ required: true, message: 'Please select a spatial data type!' }]}\n                  >\n                    <Select placeholder=\"Select spatial data type\" onChange={(value: SpatialDataType) => setSpatialDataType(value)}>\n                      <Option value=\"polygon\">Polygon</Option>\n                      <Option value=\"points\">Points</Option>\n                      <Option value=\"line\">Line</Option>\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"querySetType\"\n                    label=\"Query Set Type\"\n                    rules={[{ required: true, message: 'Please select a query set type!' }]}\n                  >\n                    <Select placeholder=\"Select query set type\" onChange={(value: RangeQuerySetType) => setQuerySetType(value)}>\n                      <Option value=\"polygon\">Polygon</Option>\n                      <Option value=\"box\">Box</Option>\n                    </Select>\n                  </Form.Item>\n                </>\n              )}\n\n              {/* --- Specific Fields for KNN Query --- */}\n              {queryType === 'knnQuery' && (\n                <>\n                  <Form.Item\n                    name=\"spatialDataType\"\n                    label=\"Spatial Data Type\"\n                    rules={[{ required: true, message: 'Please select a spatial data type!' }]}\n                  >\n                    <Select placeholder=\"Select spatial data type\" onChange={(value: SpatialDataType) => setSpatialDataType(value)}>\n                      <Option value=\"polygon\">Polygon</Option>\n                      <Option value=\"points\">Points</Option>\n                      <Option value=\"line\">Line</Option>\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"querySetType\"\n                    label=\"Query Set Type\"\n                    rules={[{ required: true, message: 'Please select a query set type!' }]}\n                  >\n                    <Select placeholder=\"Select query set type\" onChange={(value: KNNQuerySetType) => setQuerySetType(value)}>\n                      <Option value=\"point\">Point</Option>\n                      <Option value=\"polygon\">Polygon</Option>\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item name=\"kValue\" label=\"K Value (for KNN)\" rules={[{ required: true, message: 'Please input K value!' }]}>\n                    <Input type=\"number\" placeholder=\"Enter K value\" />\n                  </Form.Item>\n                </>\n              )}\n            </>\n          )}\n\n          {/* --- Fields for Spatial Joins --- */}\n          {queryType === 'spatialJoins' && (\n            <>\n              <Form.Item label=\"Left Dataset File\" style={{ width: '100%' }}>\n                <Upload\n                  {...commonUploadProps}\n                  customRequest={(options) => customRequest(options, setLeftDatasetFile)}\n                  fileList={leftDatasetFile ? [leftDatasetFile] : []}\n                >\n                  <Button icon={<UploadOutlined />} style={{ width: '100%' }}>Select Left Dataset File (.bin)</Button>\n                </Upload>\n              </Form.Item>\n\n              <Form.Item label=\"Right Dataset File\" style={{ width: '100%' }}>\n                <Upload\n                  {...commonUploadProps}\n                  customRequest={(options) => customRequest(options, setRightDatasetFile)}\n                  fileList={rightDatasetFile ? [rightDatasetFile] : []}\n                >\n                  <Button icon={<UploadOutlined />} style={{ width: '100%' }}>Select Right Dataset File (.bin)</Button>\n                </Upload>\n              </Form.Item>\n\n              <Form.Item\n                name=\"predicate\"\n                label=\"Predicate\"\n                rules={[{ required: true, message: 'Please select a predicate!' }]}\n              >\n                <Select placeholder=\"Select predicate\" onChange={(value: PredicateType) => setPredicate(value)}>\n                  <Option value=\"intersect\">Intersect</Option>\n                  <Option value=\"inside\">Inside</Option>\n                  <Option value=\"contains\">Contains</Option>\n                  <Option value=\"covers\">Covers</Option>\n                  <Option value=\"coveredBy\">Covered By</Option>\n                  <Option value=\"equals\">Equals</Option>\n                  <Option value=\"meet\">Meet</Option>\n                  <Option value=\"findRelation\">Find Relation</Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n\n          {/* --- Action Buttons --- */}\n          <Form.Item style={{marginLeft:\"55%\"}}>\n            <Space>\n              <Button type=\"default\" icon={<ReloadOutlined />} onClick={handleResetForm}>\n                Clear Form\n              </Button>\n              <Button type=\"primary\" htmlType=\"submit\">\n                Submit Query\n              </Button>\n            </Space>\n          </Form.Item>\n        </>\n      )}\n    </Form>\n  );\n};\n\nexport default HomePage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,SAASC,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAEC,KAAK,QAAQ,MAAM;AACnE,SAASC,cAAc,EAAEC,cAAc,QAAQ,mBAAmB;AAElE,OAAOC,KAAK,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExC,MAAM;EAAEC;AAAO,CAAC,GAAGZ,MAAM;;AAEzB;;AAOA,MAAMa,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,IAAI,CAAC,GAAGhB,IAAI,CAACiB,OAAO,CAAC,CAAC;EAC7B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAY,IAAI,CAAC;EAC3D,MAAM,CAACsB,eAAe,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAkB,IAAI,CAAC;EAC7E,MAAM,CAACwB,YAAY,EAAEC,eAAe,CAAC,GAAGzB,QAAQ,CAA6C,IAAI,CAAC;EAClG,MAAM,CAAC0B,SAAS,EAAEC,YAAY,CAAC,GAAG3B,QAAQ,CAAgB,IAAI,CAAC;EAE/D,MAAM,CAAC4B,WAAW,EAAEC,cAAc,CAAC,GAAG7B,QAAQ,CAAoB,IAAI,CAAC;EACvE,MAAM,CAAC8B,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG/B,QAAQ,CAAoB,IAAI,CAAC,CAAC,CAAC;EACnF,MAAM,CAACgC,eAAe,EAAEC,kBAAkB,CAAC,GAAGjC,QAAQ,CAAoB,IAAI,CAAC,CAAC,CAAC;EACjF,MAAM,CAACkC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnC,QAAQ,CAAoB,IAAI,CAAC,CAAC,CAAC;;EAGnF,MAAMoC,qBAAqB,GAAIC,KAAgB,IAAK;IAClDhB,YAAY,CAACgB,KAAK,CAAC;IACnBd,kBAAkB,CAAC,IAAI,CAAC;IACxBE,eAAe,CAAC,IAAI,CAAC;IACrBE,YAAY,CAAC,IAAI,CAAC;IAClBE,cAAc,CAAC,IAAI,CAAC;IACpBE,mBAAmB,CAAC,IAAI,CAAC;IACzBE,kBAAkB,CAAC,IAAI,CAAC;IACxBE,mBAAmB,CAAC,IAAI,CAAC;IACzB;IACAjB,IAAI,CAACoB,WAAW,CAAC,CACf,iBAAiB,EACjB,cAAc,EACd,WAAW,EACX,aAAa,EACb,kBAAkB,EAClB,iBAAiB,EACjB,kBAAkB,EAClB,QAAQ,CACT,CAAC;EACJ,CAAC;EAED,MAAMC,iBAA8B,GAAG;IACrCC,MAAM,EAAE,MAAM;IAAE;IAChBC,YAAY,EAAGC,IAAI,IAAK;MACtB,MAAMC,KAAK,GAAGD,IAAI,CAACE,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC;MACxC,IAAI,CAACF,KAAK,EAAE;QACVrC,OAAO,CAACwC,KAAK,CAAC,GAAGJ,IAAI,CAACE,IAAI,sBAAsB,CAAC;MACnD;MACA,OAAOD,KAAK,IAAIvC,MAAM,CAAC2C,WAAW,CAAC,CAAC;IACtC,CAAC;IACDC,QAAQ,EAAE,CAAC;IAAE;IACbC,QAAQ,EAAGP,IAAI,IAAK;MAClB;MACA,IAAIA,IAAI,CAACQ,GAAG,MAAKtB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEsB,GAAG,GAAErB,cAAc,CAAC,IAAI,CAAC;MACvD,IAAIa,IAAI,CAACQ,GAAG,MAAKpB,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEoB,GAAG,GAAEnB,mBAAmB,CAAC,IAAI,CAAC;MACjE,IAAIW,IAAI,CAACQ,GAAG,MAAKlB,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEkB,GAAG,GAAEjB,kBAAkB,CAAC,IAAI,CAAC;MAC/D,IAAIS,IAAI,CAACQ,GAAG,MAAKhB,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEgB,GAAG,GAAEf,mBAAmB,CAAC,IAAI,CAAC;MACjE,OAAO,IAAI,CAAC,CAAC;IACf;EACF,CAAC;EAED,MAAMgB,aAAa,GAAGlD,WAAW,CAAC,CAACmD,OAAY,EAAEC,MAA+D,KAAK;IACnH,MAAM;MAAEX,IAAI;MAAEY;IAAU,CAAC,GAAGF,OAAO;IACnCC,MAAM,CAACX,IAAI,CAAC;IACZY,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAIC,MAAW,IAAK;IACpCC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,MAAM,CAAC;IACnCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE9B,WAAW,CAAC;IACzC6B,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE5B,gBAAgB,CAAC;IACpD2B,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE1B,eAAe,CAAC;IAClDyB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAExB,gBAAgB,CAAC;IACpD;IACA5B,OAAO,CAACqD,OAAO,CAAC,iBAAiB,CAAC;EACpC,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B1C,IAAI,CAACoB,WAAW,CAAC,CAAC;IAClBjB,YAAY,CAAC,IAAI,CAAC;IAClBE,kBAAkB,CAAC,IAAI,CAAC;IACxBE,eAAe,CAAC,IAAI,CAAC;IACrBE,YAAY,CAAC,IAAI,CAAC;IAClBE,cAAc,CAAC,IAAI,CAAC;IACpBE,mBAAmB,CAAC,IAAI,CAAC;IACzBE,kBAAkB,CAAC,IAAI,CAAC;IACxBE,mBAAmB,CAAC,IAAI,CAAC;IACzB7B,OAAO,CAACuD,IAAI,CAAC,eAAe,CAAC;EAC/B,CAAC;EAED,oBACEjD,OAAA,CAACV,IAAI;IACHgB,IAAI,EAAEA,IAAK;IACX4C,MAAM,EAAC,UAAU;IACjBC,QAAQ,EAAER,YAAa;IACvBS,aAAa,EAAE;MAAE5C,SAAS,EAAE;IAAK,CAAE;IACnC6C,KAAK,EAAE;MAAEC,QAAQ,EAAE,GAAG;MAAEC,MAAM,EAAE,WAAW;MAAEC,OAAO,EAAE,MAAM;MAAEC,MAAM,EAAE,gBAAgB;MAAEC,YAAY,EAAE;IAAM,CAAE;IAAAC,QAAA,gBAE9G3D,OAAA,CAACV,IAAI,CAACsE,IAAI;MACR5B,IAAI,EAAC,WAAW;MAChB6B,KAAK,EAAC,YAAY;MAClBC,KAAK,EAAE,CAAC;QAAEC,QAAQ,EAAE,IAAI;QAAErE,OAAO,EAAE;MAA6B,CAAC,CAAE;MAAAiE,QAAA,eAEnE3D,OAAA,CAACT,MAAM;QAACyE,WAAW,EAAC,qBAAqB;QAACC,QAAQ,EAAEzC,qBAAsB;QAAAmC,QAAA,gBACxE3D,OAAA,CAACG,MAAM;UAACsB,KAAK,EAAC,YAAY;UAAAkC,QAAA,EAAC;QAAW;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC/CrE,OAAA,CAACG,MAAM;UAACsB,KAAK,EAAC,UAAU;UAAAkC,QAAA,EAAC;QAAS;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC3CrE,OAAA,CAACG,MAAM;UAACsB,KAAK,EAAC,cAAc;UAAAkC,QAAA,EAAC;QAAa;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,EAEX7D,SAAS,iBACRR,OAAA,CAAAE,SAAA;MAAAyD,QAAA,GAEG,CAACnD,SAAS,KAAK,YAAY,IAAIA,SAAS,KAAK,UAAU,kBACtDR,OAAA,CAAAE,SAAA;QAAAyD,QAAA,gBACE3D,OAAA,CAACV,IAAI,CAACsE,IAAI;UAACC,KAAK,EAAC,cAAc;UAACR,KAAK,EAAE;YAAEiB,KAAK,EAAE;UAAO,CAAE;UAAAX,QAAA,eACvD3D,OAAA,CAACR,MAAM;YAAA,GACDmC,iBAAiB;YACrBY,aAAa,EAAGC,OAAO,IAAKD,aAAa,CAACC,OAAO,EAAEvB,cAAc,CAAE;YACnEsD,QAAQ,EAAEvD,WAAW,GAAG,CAACA,WAAW,CAAC,GAAG,EAAG;YAAA2C,QAAA,eAE3C3D,OAAA,CAACP,MAAM;cAAC+E,IAAI,eAAExE,OAAA,CAACJ,cAAc;gBAAAsE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAE;cAAChB,KAAK,EAAE;gBAAEiB,KAAK,EAAE;cAAO,CAAE;cAAAX,QAAA,EAAC;YAA0B;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzF;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eAEZrE,OAAA,CAACV,IAAI,CAACsE,IAAI;UAACC,KAAK,EAAC,oBAAoB;UAACR,KAAK,EAAE;YAAEiB,KAAK,EAAE;UAAO,CAAE;UAAAX,QAAA,eAC7D3D,OAAA,CAACR,MAAM;YAAA,GACDmC,iBAAiB;YACrBY,aAAa,EAAGC,OAAO,IAAKD,aAAa,CAACC,OAAO,EAAErB,mBAAmB,CAAE;YACxEoD,QAAQ,EAAErD,gBAAgB,GAAG,CAACA,gBAAgB,CAAC,GAAG,EAAG;YAAAyC,QAAA,eAErD3D,OAAA,CAACP,MAAM;cAAC+E,IAAI,eAAExE,OAAA,CAACJ,cAAc;gBAAAsE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAE;cAAChB,KAAK,EAAE;gBAAEiB,KAAK,EAAE;cAAO,CAAE;cAAAX,QAAA,EAAC;YAAgC;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/F;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,EAGX7D,SAAS,KAAK,YAAY,iBACzBR,OAAA,CAAAE,SAAA;UAAAyD,QAAA,gBACE3D,OAAA,CAACV,IAAI,CAACsE,IAAI;YACR5B,IAAI,EAAC,iBAAiB;YACtB6B,KAAK,EAAC,mBAAmB;YACzBC,KAAK,EAAE,CAAC;cAAEC,QAAQ,EAAE,IAAI;cAAErE,OAAO,EAAE;YAAqC,CAAC,CAAE;YAAAiE,QAAA,eAE3E3D,OAAA,CAACT,MAAM;cAACyE,WAAW,EAAC,0BAA0B;cAACC,QAAQ,EAAGxC,KAAsB,IAAKd,kBAAkB,CAACc,KAAK,CAAE;cAAAkC,QAAA,gBAC7G3D,OAAA,CAACG,MAAM;gBAACsB,KAAK,EAAC,SAAS;gBAAAkC,QAAA,EAAC;cAAO;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACxCrE,OAAA,CAACG,MAAM;gBAACsB,KAAK,EAAC,QAAQ;gBAAAkC,QAAA,EAAC;cAAM;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACtCrE,OAAA,CAACG,MAAM;gBAACsB,KAAK,EAAC,MAAM;gBAAAkC,QAAA,EAAC;cAAI;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5B;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eAEZrE,OAAA,CAACV,IAAI,CAACsE,IAAI;YACR5B,IAAI,EAAC,cAAc;YACnB6B,KAAK,EAAC,gBAAgB;YACtBC,KAAK,EAAE,CAAC;cAAEC,QAAQ,EAAE,IAAI;cAAErE,OAAO,EAAE;YAAkC,CAAC,CAAE;YAAAiE,QAAA,eAExE3D,OAAA,CAACT,MAAM;cAACyE,WAAW,EAAC,uBAAuB;cAACC,QAAQ,EAAGxC,KAAwB,IAAKZ,eAAe,CAACY,KAAK,CAAE;cAAAkC,QAAA,gBACzG3D,OAAA,CAACG,MAAM;gBAACsB,KAAK,EAAC,SAAS;gBAAAkC,QAAA,EAAC;cAAO;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACxCrE,OAAA,CAACG,MAAM;gBAACsB,KAAK,EAAC,KAAK;gBAAAkC,QAAA,EAAC;cAAG;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1B;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAAA,eACZ,CACH,EAGA7D,SAAS,KAAK,UAAU,iBACvBR,OAAA,CAAAE,SAAA;UAAAyD,QAAA,gBACE3D,OAAA,CAACV,IAAI,CAACsE,IAAI;YACR5B,IAAI,EAAC,iBAAiB;YACtB6B,KAAK,EAAC,mBAAmB;YACzBC,KAAK,EAAE,CAAC;cAAEC,QAAQ,EAAE,IAAI;cAAErE,OAAO,EAAE;YAAqC,CAAC,CAAE;YAAAiE,QAAA,eAE3E3D,OAAA,CAACT,MAAM;cAACyE,WAAW,EAAC,0BAA0B;cAACC,QAAQ,EAAGxC,KAAsB,IAAKd,kBAAkB,CAACc,KAAK,CAAE;cAAAkC,QAAA,gBAC7G3D,OAAA,CAACG,MAAM;gBAACsB,KAAK,EAAC,SAAS;gBAAAkC,QAAA,EAAC;cAAO;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACxCrE,OAAA,CAACG,MAAM;gBAACsB,KAAK,EAAC,QAAQ;gBAAAkC,QAAA,EAAC;cAAM;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACtCrE,OAAA,CAACG,MAAM;gBAACsB,KAAK,EAAC,MAAM;gBAAAkC,QAAA,EAAC;cAAI;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5B;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eAEZrE,OAAA,CAACV,IAAI,CAACsE,IAAI;YACR5B,IAAI,EAAC,cAAc;YACnB6B,KAAK,EAAC,gBAAgB;YACtBC,KAAK,EAAE,CAAC;cAAEC,QAAQ,EAAE,IAAI;cAAErE,OAAO,EAAE;YAAkC,CAAC,CAAE;YAAAiE,QAAA,eAExE3D,OAAA,CAACT,MAAM;cAACyE,WAAW,EAAC,uBAAuB;cAACC,QAAQ,EAAGxC,KAAsB,IAAKZ,eAAe,CAACY,KAAK,CAAE;cAAAkC,QAAA,gBACvG3D,OAAA,CAACG,MAAM;gBAACsB,KAAK,EAAC,OAAO;gBAAAkC,QAAA,EAAC;cAAK;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACpCrE,OAAA,CAACG,MAAM;gBAACsB,KAAK,EAAC,SAAS;gBAAAkC,QAAA,EAAC;cAAO;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eAEZrE,OAAA,CAACV,IAAI,CAACsE,IAAI;YAAC5B,IAAI,EAAC,QAAQ;YAAC6B,KAAK,EAAC,mBAAmB;YAACC,KAAK,EAAE,CAAC;cAAEC,QAAQ,EAAE,IAAI;cAAErE,OAAO,EAAE;YAAwB,CAAC,CAAE;YAAAiE,QAAA,eAC/G3D,OAAA,CAACF,KAAK;cAAC2E,IAAI,EAAC,QAAQ;cAACT,WAAW,EAAC;YAAe;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1C,CAAC;QAAA,eACZ,CACH;MAAA,eACD,CACH,EAGA7D,SAAS,KAAK,cAAc,iBAC3BR,OAAA,CAAAE,SAAA;QAAAyD,QAAA,gBACE3D,OAAA,CAACV,IAAI,CAACsE,IAAI;UAACC,KAAK,EAAC,mBAAmB;UAACR,KAAK,EAAE;YAAEiB,KAAK,EAAE;UAAO,CAAE;UAAAX,QAAA,eAC5D3D,OAAA,CAACR,MAAM;YAAA,GACDmC,iBAAiB;YACrBY,aAAa,EAAGC,OAAO,IAAKD,aAAa,CAACC,OAAO,EAAEnB,kBAAkB,CAAE;YACvEkD,QAAQ,EAAEnD,eAAe,GAAG,CAACA,eAAe,CAAC,GAAG,EAAG;YAAAuC,QAAA,eAEnD3D,OAAA,CAACP,MAAM;cAAC+E,IAAI,eAAExE,OAAA,CAACJ,cAAc;gBAAAsE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAE;cAAChB,KAAK,EAAE;gBAAEiB,KAAK,EAAE;cAAO,CAAE;cAAAX,QAAA,EAAC;YAA+B;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9F;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eAEZrE,OAAA,CAACV,IAAI,CAACsE,IAAI;UAACC,KAAK,EAAC,oBAAoB;UAACR,KAAK,EAAE;YAAEiB,KAAK,EAAE;UAAO,CAAE;UAAAX,QAAA,eAC7D3D,OAAA,CAACR,MAAM;YAAA,GACDmC,iBAAiB;YACrBY,aAAa,EAAGC,OAAO,IAAKD,aAAa,CAACC,OAAO,EAAEjB,mBAAmB,CAAE;YACxEgD,QAAQ,EAAEjD,gBAAgB,GAAG,CAACA,gBAAgB,CAAC,GAAG,EAAG;YAAAqC,QAAA,eAErD3D,OAAA,CAACP,MAAM;cAAC+E,IAAI,eAAExE,OAAA,CAACJ,cAAc;gBAAAsE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAE;cAAChB,KAAK,EAAE;gBAAEiB,KAAK,EAAE;cAAO,CAAE;cAAAX,QAAA,EAAC;YAAgC;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/F;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eAEZrE,OAAA,CAACV,IAAI,CAACsE,IAAI;UACR5B,IAAI,EAAC,WAAW;UAChB6B,KAAK,EAAC,WAAW;UACjBC,KAAK,EAAE,CAAC;YAAEC,QAAQ,EAAE,IAAI;YAAErE,OAAO,EAAE;UAA6B,CAAC,CAAE;UAAAiE,QAAA,eAEnE3D,OAAA,CAACT,MAAM;YAACyE,WAAW,EAAC,kBAAkB;YAACC,QAAQ,EAAGxC,KAAoB,IAAKV,YAAY,CAACU,KAAK,CAAE;YAAAkC,QAAA,gBAC7F3D,OAAA,CAACG,MAAM;cAACsB,KAAK,EAAC,WAAW;cAAAkC,QAAA,EAAC;YAAS;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC5CrE,OAAA,CAACG,MAAM;cAACsB,KAAK,EAAC,QAAQ;cAAAkC,QAAA,EAAC;YAAM;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACtCrE,OAAA,CAACG,MAAM;cAACsB,KAAK,EAAC,UAAU;cAAAkC,QAAA,EAAC;YAAQ;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC1CrE,OAAA,CAACG,MAAM;cAACsB,KAAK,EAAC,QAAQ;cAAAkC,QAAA,EAAC;YAAM;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACtCrE,OAAA,CAACG,MAAM;cAACsB,KAAK,EAAC,WAAW;cAAAkC,QAAA,EAAC;YAAU;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC7CrE,OAAA,CAACG,MAAM;cAACsB,KAAK,EAAC,QAAQ;cAAAkC,QAAA,EAAC;YAAM;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACtCrE,OAAA,CAACG,MAAM;cAACsB,KAAK,EAAC,MAAM;cAAAkC,QAAA,EAAC;YAAI;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAClCrE,OAAA,CAACG,MAAM;cAACsB,KAAK,EAAC,cAAc;cAAAkC,QAAA,EAAC;YAAa;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7C;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA,eACZ,CACH,eAGDrE,OAAA,CAACV,IAAI,CAACsE,IAAI;QAACP,KAAK,EAAE;UAACqB,UAAU,EAAC;QAAK,CAAE;QAAAf,QAAA,eACnC3D,OAAA,CAACL,KAAK;UAAAgE,QAAA,gBACJ3D,OAAA,CAACP,MAAM;YAACgF,IAAI,EAAC,SAAS;YAACD,IAAI,eAAExE,OAAA,CAACH,cAAc;cAAAqE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAE;YAACM,OAAO,EAAE3B,eAAgB;YAAAW,QAAA,EAAC;UAE3E;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTrE,OAAA,CAACP,MAAM;YAACgF,IAAI,EAAC,SAAS;YAACG,QAAQ,EAAC,QAAQ;YAAAjB,QAAA,EAAC;UAEzC;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA,eACZ,CACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEX,CAAC;AAAChE,EAAA,CAxPID,QAAkB;EAAA,QACPd,IAAI,CAACiB,OAAO;AAAA;AAAAsE,EAAA,GADvBzE,QAAkB;AA0PxB,eAAeA,QAAQ;AAAC,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}