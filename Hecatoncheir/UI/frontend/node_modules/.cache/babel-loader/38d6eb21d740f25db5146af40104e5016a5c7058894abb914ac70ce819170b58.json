{"ast":null,"code":"var _jsxFileName = \"/home/command/Desktop/hecatoncheir-app/frontend/src/components/set-up-hecatoncheir.tsx\",\n  _s = $RefreshSig$();\n// src/components/ClusterSetup.tsx\nimport React, { useEffect } from 'react'; // No need for useState or useEffect here anymore\nimport { Form, Button, message } from 'antd';\nimport TextArea from 'antd/es/input/TextArea';\n// PCListDisplay is no longer rendered directly here, but passed in via currentPcs from App.tsx\n// import PCListDisplay from './PCListDisplay'; // Remove this import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClusterSetup = ({\n  onClusterInitialized,\n  pcNamesInput,\n  setPcNamesInput,\n  currentPcs // Now a prop, used for enabling/disabling button\n}) => {\n  _s();\n  const [form] = Form.useForm();\n\n  // No useEffect here related to pcNamesInput, as it's handled in App.tsx\n\n  const handleTextAreaChange = e => {\n    setPcNamesInput(e.target.value);\n    // When the TextArea changes, we also need to update the form's 'pcs' field\n    // so that the form.getFieldValue('pcs') in handleInitHec is up-to-date.\n    const names = e.target.value.split('\\n').map(name => name.trim()).filter(name => name !== '');\n    form.setFieldsValue({\n      pcs: names.map(name => ({\n        nameOrIp: name\n      }))\n    });\n  };\n  const handleInitHec = async () => {\n    // Removed `values` as a direct parameter since we'll use form.getFieldsValue()\n    message.loading('Initializing HEC cluster...', 0);\n\n    // Get the latest 'pcs' values from the form state\n    const formValues = form.getFieldsValue();\n    const pcsToSend = (formValues.pcs || []).map(pc => ({\n      ...pc,\n      nameOrIp: pc.nameOrIp ? `${pc.nameOrIp}:1` : '' // Append :1 to the name/IP\n    }));\n    const clusterConfig = {\n      numPcs: pcsToSend.length,\n      pcs: pcsToSend\n    };\n    try {\n      const response = await fetch('http://localhost:5000/init-hec', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(clusterConfig)\n      });\n      message.destroy();\n      if (response.ok) {\n        const result = await response.json();\n        message.success('HEC cluster initialized successfully!');\n        console.log('Backend response (init-hec):', result);\n        onClusterInitialized(); // This will trigger App.tsx to change its content\n      } else {\n        const errorText = await response.text();\n        message.error(`HEC initialization failed: ${errorText}`);\n        console.error('Backend error (init-hec):', response.status, errorText);\n      }\n    } catch (error) {\n      message.destroy();\n      message.error('Network error or server unavailable during HEC initialization.');\n      console.error('Fetch error (init-hec):', error);\n    }\n  };\n\n  // Set initial form values based on pcNamesInput prop\n  useEffect(() => {\n    const names = pcNamesInput.split('\\n').map(name => name.trim()).filter(name => name !== '');\n    form.setFieldsValue({\n      pcs: names.map(name => ({\n        nameOrIp: name\n      }))\n    });\n  }, [pcNamesInput, form]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    layout: \"vertical\",\n    onFinish: handleInitHec // The onFinish handler now calls handleInitHec directly\n    ,\n    initialValues: {\n      pcs: []\n    } // Initial values still here for form structure\n    ,\n    style: {\n      padding: '20px',\n      border: '1px solid #eee',\n      borderRadius: '8px',\n      marginTop: \"2%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"PC Names/IPs in the Cluster (one per line)\",\n      required: true,\n      children: /*#__PURE__*/_jsxDEV(TextArea, {\n        placeholder: \"Enter the names or IPs of the PCs, one per line\",\n        style: {\n          width: '100%',\n          minHeight: '120px'\n        },\n        value: pcNamesInput,\n        onChange: handleTextAreaChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        marginTop: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\" // This button now triggers the form submission\n        ,\n        size: \"large\",\n        style: {\n          width: '100%'\n        },\n        disabled: currentPcs.length === 0 // Disable if no PCs are identified\n        ,\n        children: \"Init Hecatoncheir\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(ClusterSetup, \"hm6PaQ/QYB/X6ENq1nmkdh1TV0k=\", false, function () {\n  return [Form.useForm];\n});\n_c = ClusterSetup;\nexport default ClusterSetup;\nvar _c;\n$RefreshReg$(_c, \"ClusterSetup\");","map":{"version":3,"names":["React","useEffect","Form","Button","message","TextArea","jsxDEV","_jsxDEV","ClusterSetup","onClusterInitialized","pcNamesInput","setPcNamesInput","currentPcs","_s","form","useForm","handleTextAreaChange","e","target","value","names","split","map","name","trim","filter","setFieldsValue","pcs","nameOrIp","handleInitHec","loading","formValues","getFieldsValue","pcsToSend","pc","clusterConfig","numPcs","length","response","fetch","method","headers","body","JSON","stringify","destroy","ok","result","json","success","console","log","errorText","text","error","status","layout","onFinish","initialValues","style","padding","border","borderRadius","marginTop","children","Item","label","required","placeholder","width","minHeight","onChange","fileName","_jsxFileName","lineNumber","columnNumber","type","htmlType","size","disabled","_c","$RefreshReg$"],"sources":["/home/command/Desktop/hecatoncheir-app/frontend/src/components/set-up-hecatoncheir.tsx"],"sourcesContent":["// src/components/ClusterSetup.tsx\nimport React, { useEffect } from 'react'; // No need for useState or useEffect here anymore\nimport { Form, Input, Button, Space, message, Row, Col } from 'antd';\nimport TextArea from 'antd/es/input/TextArea';\n// PCListDisplay is no longer rendered directly here, but passed in via currentPcs from App.tsx\n// import PCListDisplay from './PCListDisplay'; // Remove this import\n\ninterface PC {\n  nameOrIp: string;\n}\n\ninterface ClusterSetupProps {\n  onClusterInitialized: () => void;\n  pcNamesInput: string; // Receive as prop\n  setPcNamesInput: (value: string) => void; // Receive as prop\n  currentPcs: PC[]; // Receive as prop\n}\n\nconst ClusterSetup: React.FC<ClusterSetupProps> = ({\n  onClusterInitialized,\n  pcNamesInput,\n  setPcNamesInput,\n  currentPcs, // Now a prop, used for enabling/disabling button\n}) => {\n  const [form] = Form.useForm();\n\n  // No useEffect here related to pcNamesInput, as it's handled in App.tsx\n\n  const handleTextAreaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setPcNamesInput(e.target.value);\n    // When the TextArea changes, we also need to update the form's 'pcs' field\n    // so that the form.getFieldValue('pcs') in handleInitHec is up-to-date.\n    const names = e.target.value\n      .split('\\n')\n      .map((name) => name.trim())\n      .filter((name) => name !== '');\n    form.setFieldsValue({ pcs: names.map((name) => ({ nameOrIp: name })) });\n  };\n\n  const handleInitHec = async () => { // Removed `values` as a direct parameter since we'll use form.getFieldsValue()\n    message.loading('Initializing HEC cluster...', 0);\n\n    // Get the latest 'pcs' values from the form state\n    const formValues = form.getFieldsValue();\n    const pcsToSend = (formValues.pcs || []).map((pc: { nameOrIp: string }) => ({\n      ...pc,\n      nameOrIp: pc.nameOrIp ? `${pc.nameOrIp}:1` : '', // Append :1 to the name/IP\n    }));\n\n    const clusterConfig = {\n      numPcs: pcsToSend.length,\n      pcs: pcsToSend,\n    };\n\n    try {\n      const response = await fetch('http://localhost:5000/init-hec', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(clusterConfig),\n      });\n\n      message.destroy();\n\n      if (response.ok) {\n        const result = await response.json();\n        message.success('HEC cluster initialized successfully!');\n        console.log('Backend response (init-hec):', result);\n        onClusterInitialized(); // This will trigger App.tsx to change its content\n      } else {\n        const errorText = await response.text();\n        message.error(`HEC initialization failed: ${errorText}`);\n        console.error('Backend error (init-hec):', response.status, errorText);\n      }\n    } catch (error) {\n      message.destroy();\n      message.error('Network error or server unavailable during HEC initialization.');\n      console.error('Fetch error (init-hec):', error);\n    }\n  };\n\n\n  // Set initial form values based on pcNamesInput prop\n  useEffect(() => {\n    const names = pcNamesInput\n      .split('\\n')\n      .map((name) => name.trim())\n      .filter((name) => name !== '');\n    form.setFieldsValue({ pcs: names.map((name) => ({ nameOrIp: name })) });\n  }, [pcNamesInput, form]);\n\n\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      onFinish={handleInitHec} // The onFinish handler now calls handleInitHec directly\n      initialValues={{ pcs: [] }} // Initial values still here for form structure\n      style={{ padding: '20px', border: '1px solid #eee', borderRadius: '8px', marginTop:\"2%\" }}\n    >\n      <Form.Item label=\"PC Names/IPs in the Cluster (one per line)\" required>\n        <TextArea\n          placeholder=\"Enter the names or IPs of the PCs, one per line\"\n          style={{ width: '100%', minHeight: '120px' }}\n          value={pcNamesInput}\n          onChange={handleTextAreaChange}\n        />\n      </Form.Item>\n\n      <Form.Item style={{ marginTop: 20 }}>\n        <Button\n          type=\"primary\"\n          htmlType=\"submit\" // This button now triggers the form submission\n          size=\"large\"\n          style={{ width: '100%' }}\n          disabled={currentPcs.length === 0} // Disable if no PCs are identified\n        >\n          Init Hecatoncheir\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default ClusterSetup;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO,CAAC,CAAC;AAC1C,SAASC,IAAI,EAASC,MAAM,EAASC,OAAO,QAAkB,MAAM;AACpE,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAaA,MAAMC,YAAyC,GAAGA,CAAC;EACjDC,oBAAoB;EACpBC,YAAY;EACZC,eAAe;EACfC,UAAU,CAAE;AACd,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,IAAI,CAAC,GAAGZ,IAAI,CAACa,OAAO,CAAC,CAAC;;EAE7B;;EAEA,MAAMC,oBAAoB,GAAIC,CAAyC,IAAK;IAC1EN,eAAe,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IAC/B;IACA;IACA,MAAMC,KAAK,GAAGH,CAAC,CAACC,MAAM,CAACC,KAAK,CACzBE,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAC1BC,MAAM,CAAEF,IAAI,IAAKA,IAAI,KAAK,EAAE,CAAC;IAChCT,IAAI,CAACY,cAAc,CAAC;MAAEC,GAAG,EAAEP,KAAK,CAACE,GAAG,CAAEC,IAAI,KAAM;QAAEK,QAAQ,EAAEL;MAAK,CAAC,CAAC;IAAE,CAAC,CAAC;EACzE,CAAC;EAED,MAAMM,aAAa,GAAG,MAAAA,CAAA,KAAY;IAAE;IAClCzB,OAAO,CAAC0B,OAAO,CAAC,6BAA6B,EAAE,CAAC,CAAC;;IAEjD;IACA,MAAMC,UAAU,GAAGjB,IAAI,CAACkB,cAAc,CAAC,CAAC;IACxC,MAAMC,SAAS,GAAG,CAACF,UAAU,CAACJ,GAAG,IAAI,EAAE,EAAEL,GAAG,CAAEY,EAAwB,KAAM;MAC1E,GAAGA,EAAE;MACLN,QAAQ,EAAEM,EAAE,CAACN,QAAQ,GAAG,GAAGM,EAAE,CAACN,QAAQ,IAAI,GAAG,EAAE,CAAE;IACnD,CAAC,CAAC,CAAC;IAEH,MAAMO,aAAa,GAAG;MACpBC,MAAM,EAAEH,SAAS,CAACI,MAAM;MACxBV,GAAG,EAAEM;IACP,CAAC;IAED,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;QAC7DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,aAAa;MACpC,CAAC,CAAC;MAEF/B,OAAO,CAACyC,OAAO,CAAC,CAAC;MAEjB,IAAIP,QAAQ,CAACQ,EAAE,EAAE;QACf,MAAMC,MAAM,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACpC5C,OAAO,CAAC6C,OAAO,CAAC,uCAAuC,CAAC;QACxDC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEJ,MAAM,CAAC;QACnDtC,oBAAoB,CAAC,CAAC,CAAC,CAAC;MAC1B,CAAC,MAAM;QACL,MAAM2C,SAAS,GAAG,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;QACvCjD,OAAO,CAACkD,KAAK,CAAC,8BAA8BF,SAAS,EAAE,CAAC;QACxDF,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAEhB,QAAQ,CAACiB,MAAM,EAAEH,SAAS,CAAC;MACxE;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdlD,OAAO,CAACyC,OAAO,CAAC,CAAC;MACjBzC,OAAO,CAACkD,KAAK,CAAC,gEAAgE,CAAC;MAC/EJ,OAAO,CAACI,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;;EAGD;EACArD,SAAS,CAAC,MAAM;IACd,MAAMmB,KAAK,GAAGV,YAAY,CACvBW,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAC1BC,MAAM,CAAEF,IAAI,IAAKA,IAAI,KAAK,EAAE,CAAC;IAChCT,IAAI,CAACY,cAAc,CAAC;MAAEC,GAAG,EAAEP,KAAK,CAACE,GAAG,CAAEC,IAAI,KAAM;QAAEK,QAAQ,EAAEL;MAAK,CAAC,CAAC;IAAE,CAAC,CAAC;EACzE,CAAC,EAAE,CAACb,YAAY,EAAEI,IAAI,CAAC,CAAC;EAGxB,oBACEP,OAAA,CAACL,IAAI;IACHY,IAAI,EAAEA,IAAK;IACX0C,MAAM,EAAC,UAAU;IACjBC,QAAQ,EAAE5B,aAAc,CAAC;IAAA;IACzB6B,aAAa,EAAE;MAAE/B,GAAG,EAAE;IAAG,CAAE,CAAC;IAAA;IAC5BgC,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,MAAM,EAAE,gBAAgB;MAAEC,YAAY,EAAE,KAAK;MAAEC,SAAS,EAAC;IAAK,CAAE;IAAAC,QAAA,gBAE1FzD,OAAA,CAACL,IAAI,CAAC+D,IAAI;MAACC,KAAK,EAAC,4CAA4C;MAACC,QAAQ;MAAAH,QAAA,eACpEzD,OAAA,CAACF,QAAQ;QACP+D,WAAW,EAAC,iDAAiD;QAC7DT,KAAK,EAAE;UAAEU,KAAK,EAAE,MAAM;UAAEC,SAAS,EAAE;QAAQ,CAAE;QAC7CnD,KAAK,EAAET,YAAa;QACpB6D,QAAQ,EAAEvD;MAAqB;QAAAwD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO,CAAC,eAEZpE,OAAA,CAACL,IAAI,CAAC+D,IAAI;MAACN,KAAK,EAAE;QAAEI,SAAS,EAAE;MAAG,CAAE;MAAAC,QAAA,eAClCzD,OAAA,CAACJ,MAAM;QACLyE,IAAI,EAAC,SAAS;QACdC,QAAQ,EAAC,QAAQ,CAAC;QAAA;QAClBC,IAAI,EAAC,OAAO;QACZnB,KAAK,EAAE;UAAEU,KAAK,EAAE;QAAO,CAAE;QACzBU,QAAQ,EAAEnE,UAAU,CAACyB,MAAM,KAAK,CAAE,CAAC;QAAA;QAAA2B,QAAA,EACpC;MAED;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEX,CAAC;AAAC9D,EAAA,CAzGIL,YAAyC;EAAA,QAM9BN,IAAI,CAACa,OAAO;AAAA;AAAAiE,EAAA,GANvBxE,YAAyC;AA2G/C,eAAeA,YAAY;AAAC,IAAAwE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}