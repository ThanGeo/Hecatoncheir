import * as React from 'react';
import type { FormRef, FormInstance } from 'rc-field-form/es/interface';
import Field from 'rc-field-form/es/Field';
import List from 'rc-field-form/es/List';
import useForm from 'rc-field-form/es/useForm';
import type { FormProps } from 'rc-field-form/es/Form';
import { FormProvider } from 'rc-field-form/es/FormContext';
import FieldContext from 'rc-field-form/es/FieldContext';
import ListContext from 'rc-field-form/es/ListContext';
import useWatch from 'rc-field-form/es/useWatch';
declare const InternalForm: <Values = any>(props: FormProps<Values> & {
    ref?: React.Ref<FormRef<Values>>;
}) => React.ReactElement;
type InternalFormType = typeof InternalForm;
interface RefFormType extends InternalFormType {
    FormProvider: typeof FormProvider;
    Field: typeof Field;
    List: typeof List;
    useForm: typeof useForm;
    useWatch: typeof useWatch;
}
declare const RefForm: RefFormType;
export { Field, List, useForm, FormProvider, FieldContext, ListContext, useWatch };
export type { FormProps, FormInstance, FormRef };
export default RefForm;
